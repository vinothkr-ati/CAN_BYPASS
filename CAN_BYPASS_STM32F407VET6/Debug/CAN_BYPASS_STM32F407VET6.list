
CAN_BYPASS_STM32F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006480  08006480  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006488  08006488  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006488  08006488  00007488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800648c  0800648c  0000748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006490  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00004c84  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ce4  20004ce4  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161e5  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ee  00000000  00000000  0001e275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00021368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb9  00000000  00000000  00022680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fb8  00000000  00000000  00023539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139fe  00000000  00000000  000264f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d59ad  00000000  00000000  00039eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f89c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005388  00000000  00000000  0010f8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00114c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006378 	.word	0x08006378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006378 	.word	0x08006378

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <CAN_TransmitMessage_Std_ID>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef CAN_TransmitMessage_Std_ID(CAN_HandleTypeDef *hcan,uint32_t Std_ID, uint8_t *data, uint8_t len) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	@ 0x38
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
    HAL_StatusTypeDef status;

    // Configure TxHeadervolatile uint16_t  Left_End_Stop_Steering  = 0;
    volatile uint16_t  Right_End_Stop_Steering = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	82fb      	strh	r3, [r7, #22]
    TxHeader.StdId = Std_ID;           // Standard Identifier
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	61fb      	str	r3, [r7, #28]

    TxHeader.IDE = CAN_ID_STD;        // Standard ID
 8000516:	2300      	movs	r3, #0
 8000518:	627b      	str	r3, [r7, #36]	@ 0x24

    TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 800051a:	2300      	movs	r3, #0
 800051c:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.DLC = len;               // Data Length Code
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.TransmitGlobalTime = DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    // Request transmission
    status = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	f107 011c 	add.w	r1, r7, #28
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f001 f81c 	bl	8001570 <HAL_CAN_AddTxMessage>
 8000538:	4603      	mov	r3, r0
 800053a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (status != HAL_OK) {
 800053e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <CAN_TransmitMessage_Std_ID+0x50>
        // Transmission request failed
        return status;
 8000546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800054a:	e009      	b.n	8000560 <CAN_TransmitMessage_Std_ID+0x64>
    }

    // Wait until the transmission is complete
    while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox));
 800054c:	bf00      	nop
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	4619      	mov	r1, r3
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f001 f8dc 	bl	8001710 <HAL_CAN_IsTxMessagePending>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1f7      	bne.n	800054e <CAN_TransmitMessage_Std_ID+0x52>

    // Transmission successful, mailbox is freed automatically

    return HAL_OK;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3738      	adds	r7, #56	@ 0x38
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <CAN_TransmitMessage_Ext_ID>:


/*
 * STD ID
 */
HAL_StatusTypeDef CAN_TransmitMessage_Ext_ID(CAN_HandleTypeDef *hcan, uint32_t Ext_ID, uint8_t *data, uint8_t len) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	@ 0x30
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef status;

    // Configure TxHeader
            // Standard Identifier
    TxHeader.ExtId = Ext_ID;            // Extended Identifier (not used in this case)
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	61bb      	str	r3, [r7, #24]

    TxHeader.IDE = CAN_ID_EXT;
 800057e:	2304      	movs	r3, #4
 8000580:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000582:	2300      	movs	r3, #0
 8000584:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = len;               // Data Length Code
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TransmitGlobalTime = DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    // Request transmission
    status = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	f107 0114 	add.w	r1, r7, #20
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	68f8      	ldr	r0, [r7, #12]
 800059c:	f000 ffe8 	bl	8001570 <HAL_CAN_AddTxMessage>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (status != HAL_OK) {
 80005a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <CAN_TransmitMessage_Ext_ID+0x4c>
        // Transmission request failed
        return status;
 80005ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005b2:	e009      	b.n	80005c8 <CAN_TransmitMessage_Ext_ID+0x60>
    }

    // Wait until the transmission is complete
    while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox));
 80005b4:	bf00      	nop
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f001 f8a8 	bl	8001710 <HAL_CAN_IsTxMessagePending>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1f7      	bne.n	80005b6 <CAN_TransmitMessage_Ext_ID+0x4e>

    // Transmission successful, mailbox is freed automatically
    return HAL_OK;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3730      	adds	r7, #48	@ 0x30
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_CAN_RxFifo0MsgPendingCallback>:




void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]


    if (hcan->Instance == CAN1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a3e      	ldr	r2, [pc, #248]	@ (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d176      	bne.n	80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
       {
            HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1RX_Header, CAN1RX_DATA);
 80005e2:	4b3e      	ldr	r3, [pc, #248]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80005e4:	4a3e      	ldr	r2, [pc, #248]	@ (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f001 f8b5 	bl	8001758 <HAL_CAN_GetRxMessage>
            // Process CAN1 Data here
            CAN1_Queue_TX[0] = CAN1RX_DATA[0];
 80005ee:	4b3b      	ldr	r3, [pc, #236]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b3c      	ldr	r3, [pc, #240]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80005f4:	701a      	strb	r2, [r3, #0]
			CAN1_Queue_TX[1] = CAN1RX_DATA[1];
 80005f6:	4b39      	ldr	r3, [pc, #228]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80005f8:	785a      	ldrb	r2, [r3, #1]
 80005fa:	4b3a      	ldr	r3, [pc, #232]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80005fc:	705a      	strb	r2, [r3, #1]
			CAN1_Queue_TX[2] = CAN1RX_DATA[2];
 80005fe:	4b37      	ldr	r3, [pc, #220]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000600:	789a      	ldrb	r2, [r3, #2]
 8000602:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000604:	709a      	strb	r2, [r3, #2]
			CAN1_Queue_TX[3] = CAN1RX_DATA[3];
 8000606:	4b35      	ldr	r3, [pc, #212]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800060c:	70da      	strb	r2, [r3, #3]

			CAN1_Queue_TX[4] = CAN1RX_DATA[4];
 800060e:	4b33      	ldr	r3, [pc, #204]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	4b34      	ldr	r3, [pc, #208]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000614:	711a      	strb	r2, [r3, #4]
			CAN1_Queue_TX[5] = CAN1RX_DATA[5];
 8000616:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	4b32      	ldr	r3, [pc, #200]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800061c:	715a      	strb	r2, [r3, #5]
			CAN1_Queue_TX[6] = CAN1RX_DATA[6];
 800061e:	4b2f      	ldr	r3, [pc, #188]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000624:	719a      	strb	r2, [r3, #6]
			CAN1_Queue_TX[7] = CAN1RX_DATA[7];
 8000626:	4b2d      	ldr	r3, [pc, #180]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000628:	79da      	ldrb	r2, [r3, #7]
 800062a:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800062c:	71da      	strb	r2, [r3, #7]

			//		CAN1_RX_DLC = RxHeader.DLC;

			CAN1RX_IDE_DATA = CAN1RX_Header.IDE;
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a2d      	ldr	r2, [pc, #180]	@ (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000634:	6013      	str	r3, [r2, #0]
			if(CAN1RX_IDE_DATA == 0) {
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d11b      	bne.n	8000676 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
				CAN1RX_Std_ID_DATA = CAN1RX_Header.StdId;
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a2a      	ldr	r2, [pc, #168]	@ (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000644:	6013      	str	r3, [r2, #0]
				CAN1_Queue_TX[8]  =  (CAN1RX_Std_ID_DATA >> 0)  & 0xFF;
 8000646:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800064e:	721a      	strb	r2, [r3, #8]
				CAN1_Queue_TX[9]  =  (CAN1RX_Std_ID_DATA >> 8)  & 0xFF;
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800065a:	725a      	strb	r2, [r3, #9]
				CAN1_Queue_TX[10] =  (CAN1RX_Std_ID_DATA >> 16) & 0xFF;
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0c1b      	lsrs	r3, r3, #16
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000666:	729a      	strb	r2, [r3, #10]
				CAN1_Queue_TX[11] =  (CAN1RX_Std_ID_DATA >> 24) & 0xFF;
 8000668:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	0e1b      	lsrs	r3, r3, #24
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000672:	72da      	strb	r2, [r3, #11]
 8000674:	e01a      	b.n	80006ac <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
			}else {
				CAN1RX_Ext_ID_DATA = CAN1RX_Header.ExtId;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a1d      	ldr	r2, [pc, #116]	@ (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800067c:	6013      	str	r3, [r2, #0]
				CAN1_Queue_TX[8] =  (CAN1RX_Ext_ID_DATA >> 0)  & 0xFF;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000686:	721a      	strb	r2, [r3, #8]
				CAN1_Queue_TX[9] = (CAN1RX_Ext_ID_DATA >> 8)  & 0xFF;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000692:	725a      	strb	r2, [r3, #9]
				CAN1_Queue_TX[10] = (CAN1RX_Ext_ID_DATA >> 16) & 0xFF;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	0c1b      	lsrs	r3, r3, #16
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800069e:	729a      	strb	r2, [r3, #10]
				CAN1_Queue_TX[11] = (CAN1RX_Ext_ID_DATA >> 24) & 0xFF;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	0e1b      	lsrs	r3, r3, #24
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80006aa:	72da      	strb	r2, [r3, #11]
			}
			CAN1_Queue_TX[12] = (uint8_t)CAN1RX_IDE_DATA;// IDE
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80006b4:	731a      	strb	r2, [r3, #12]
			CAN1_Queue_TX[13] = (uint8_t)CAN1RX_Header.DLC;;// DLC
 80006b6:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80006be:	735a      	strb	r2, [r3, #13]
			 // Attempt to send data to the queue in a non-blocking way
			osStatus_t status = osMessageQueuePut(CAN1RX_Data_QueueHandle, CAN1_Queue_TX, 0, 0);  // No timeout, no blocking
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2200      	movs	r2, #0
 80006c8:	4906      	ldr	r1, [pc, #24]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80006ca:	f002 ff31 	bl	8003530 <osMessageQueuePut>
 80006ce:	60f8      	str	r0, [r7, #12]
			  // Queue full, data not sent; could handle this or log it
			}


       }
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40006400 	.word	0x40006400
 80006dc:	200000a8 	.word	0x200000a8
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	20000098 	.word	0x20000098
 80006e8:	200000b4 	.word	0x200000b4
 80006ec:	200000b8 	.word	0x200000b8
 80006f0:	200000bc 	.word	0x200000bc
 80006f4:	20000164 	.word	0x20000164

080006f8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

	 if (hcan->Instance == CAN2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a47      	ldr	r2, [pc, #284]	@ (8000824 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	f040 8087 	bne.w	800081a <HAL_CAN_RxFifo1MsgPendingCallback+0x122>
	 {
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CAN2RX_Header, CAN2RX_DATA);
 800070c:	4b46      	ldr	r3, [pc, #280]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800070e:	4a47      	ldr	r2, [pc, #284]	@ (800082c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000710:	2101      	movs	r1, #1
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f001 f820 	bl	8001758 <HAL_CAN_GetRxMessage>
		// Process CAN2 Data here
		CAN2_Queue_TX[0] = CAN2RX_DATA[0];
 8000718:	4b43      	ldr	r3, [pc, #268]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b44      	ldr	r3, [pc, #272]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000720:	701a      	strb	r2, [r3, #0]
		CAN2_Queue_TX[1] = CAN2RX_DATA[1];
 8000722:	4b41      	ldr	r3, [pc, #260]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b41      	ldr	r3, [pc, #260]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 800072a:	705a      	strb	r2, [r3, #1]
		CAN2_Queue_TX[2] = CAN2RX_DATA[2];
 800072c:	4b3e      	ldr	r3, [pc, #248]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800072e:	789b      	ldrb	r3, [r3, #2]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b3f      	ldr	r3, [pc, #252]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000734:	709a      	strb	r2, [r3, #2]
		CAN2_Queue_TX[3] = CAN2RX_DATA[3];
 8000736:	4b3c      	ldr	r3, [pc, #240]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000738:	78db      	ldrb	r3, [r3, #3]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b3c      	ldr	r3, [pc, #240]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 800073e:	70da      	strb	r2, [r3, #3]

		CAN2_Queue_TX[4] = CAN2RX_DATA[4];
 8000740:	4b39      	ldr	r3, [pc, #228]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b3a      	ldr	r3, [pc, #232]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000748:	711a      	strb	r2, [r3, #4]
		CAN2_Queue_TX[5] = CAN2RX_DATA[5];
 800074a:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b37      	ldr	r3, [pc, #220]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000752:	715a      	strb	r2, [r3, #5]
		CAN2_Queue_TX[6] = CAN2RX_DATA[6];
 8000754:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000756:	799b      	ldrb	r3, [r3, #6]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 800075c:	719a      	strb	r2, [r3, #6]
		CAN2_Queue_TX[7] = CAN2RX_DATA[7];
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000760:	79db      	ldrb	r3, [r3, #7]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000766:	71da      	strb	r2, [r3, #7]

		//		CAN1_RX_DLC = RxHeader.DLC;

		CAN2RX_IDE_DATA = CAN2RX_Header.IDE;
 8000768:	4b30      	ldr	r3, [pc, #192]	@ (800082c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a31      	ldr	r2, [pc, #196]	@ (8000834 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 800076e:	6013      	str	r3, [r2, #0]
		if(CAN2RX_IDE_DATA == 0) {
 8000770:	4b30      	ldr	r3, [pc, #192]	@ (8000834 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d11b      	bne.n	80007b0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
			CAN2RX_Std_ID_DATA = CAN2RX_Header.StdId;
 8000778:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a2e      	ldr	r2, [pc, #184]	@ (8000838 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800077e:	6013      	str	r3, [r2, #0]
			CAN2_Queue_TX[8]  =  (CAN2RX_Std_ID_DATA >> 0)  & 0xFF;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b2a      	ldr	r3, [pc, #168]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000788:	721a      	strb	r2, [r3, #8]
			CAN2_Queue_TX[9]  =  (CAN2RX_Std_ID_DATA >> 8)  & 0xFF;
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000794:	725a      	strb	r2, [r3, #9]
			CAN2_Queue_TX[10] =  (CAN2RX_Std_ID_DATA >> 16) & 0xFF;
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007a0:	729a      	strb	r2, [r3, #10]
			CAN2_Queue_TX[11] =  (CAN2RX_Std_ID_DATA >> 24) & 0xFF;
 80007a2:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	0e1b      	lsrs	r3, r3, #24
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007ac:	72da      	strb	r2, [r3, #11]
 80007ae:	e01a      	b.n	80007e6 <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
		}else {
			CAN2RX_Ext_ID_DATA = CAN2RX_Header.ExtId;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80007b6:	6013      	str	r3, [r2, #0]
			CAN2_Queue_TX[8] =  (CAN2RX_Ext_ID_DATA >> 0)  & 0xFF;
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007c0:	721a      	strb	r2, [r3, #8]
			CAN2_Queue_TX[9] =  (CAN2RX_Ext_ID_DATA >> 8)  & 0xFF;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007cc:	725a      	strb	r2, [r3, #9]
			CAN2_Queue_TX[10] = (CAN2RX_Ext_ID_DATA >> 16) & 0xFF;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007d8:	729a      	strb	r2, [r3, #10]
			CAN2_Queue_TX[11] = (CAN2RX_Ext_ID_DATA >> 24) & 0xFF;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	0e1b      	lsrs	r3, r3, #24
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007e4:	72da      	strb	r2, [r3, #11]
		}
		CAN2_Queue_TX[12] = (uint8_t)CAN2RX_IDE_DATA;// IDE
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007ee:	731a      	strb	r2, [r3, #12]
		CAN2_Queue_TX[13] = (uint8_t)CAN2RX_Header.DLC;;// DLC
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80007f8:	735a      	strb	r2, [r3, #13]
		 // Attempt to send data to the queue in a non-blocking way
		osStatus_t status = osMessageQueuePut(CAN2RX_Data_QueueHandle, CAN2_Queue_TX, 0, 0);  // No timeout, no blocking
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	2200      	movs	r2, #0
 8000802:	490b      	ldr	r1, [pc, #44]	@ (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000804:	f002 fe94 	bl	8003530 <osMessageQueuePut>
 8000808:	60f8      	str	r0, [r7, #12]
		  // Queue full, data not sent; could handle this or log it
		}

		//
		// Reset timeout timer
		Last_CAN2_RX_Tick = HAL_GetTick();
 800080a:	f000 fc87 	bl	800111c <HAL_GetTick>
 800080e:	4603      	mov	r3, r0
 8000810:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000812:	6013      	str	r3, [r2, #0]
						CAN2_Timeout_Flag = 0;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]

	 }

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40006800 	.word	0x40006800
 8000828:	200000ec 	.word	0x200000ec
 800082c:	200000c0 	.word	0x200000c0
 8000830:	200000dc 	.word	0x200000dc
 8000834:	200000f8 	.word	0x200000f8
 8000838:	200000fc 	.word	0x200000fc
 800083c:	20000100 	.word	0x20000100
 8000840:	20000168 	.word	0x20000168
 8000844:	20000108 	.word	0x20000108
 8000848:	20000104 	.word	0x20000104

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fc2e 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f852 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f960 	bl	8000b1c <MX_GPIO_Init>
  MX_CAN1_Init();
 800085c:	f000 f8b8 	bl	80009d0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000860:	f000 f908 	bl	8000a74 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */


	HAL_CAN_Start(&hcan1);
 8000864:	4819      	ldr	r0, [pc, #100]	@ (80008cc <main+0x80>)
 8000866:	f000 fe3f 	bl	80014e8 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 800086a:	4819      	ldr	r0, [pc, #100]	@ (80008d0 <main+0x84>)
 800086c:	f000 fe3c 	bl	80014e8 <HAL_CAN_Start>



	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);//  this now
 8000870:	2102      	movs	r1, #2
 8000872:	4816      	ldr	r0, [pc, #88]	@ (80008cc <main+0x80>)
 8000874:	f001 f892 	bl	800199c <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);//  this now
 8000878:	2110      	movs	r1, #16
 800087a:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <main+0x84>)
 800087c:	f001 f88e 	bl	800199c <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000880:	f002 fcec 	bl	800325c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN1RX_Data_Queue */
  CAN1RX_Data_QueueHandle = osMessageQueueNew (50, sizeof(CAN1_Queue_TX), &CAN1RX_Data_Queue_attributes);
 8000884:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <main+0x88>)
 8000886:	210e      	movs	r1, #14
 8000888:	2032      	movs	r0, #50	@ 0x32
 800088a:	f002 fdde 	bl	800344a <osMessageQueueNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <main+0x8c>)
 8000892:	6013      	str	r3, [r2, #0]

  /* creation of CAN2RX_Data_Queue */
  CAN2RX_Data_QueueHandle = osMessageQueueNew (50, sizeof(CAN2_Queue_TX), &CAN2RX_Data_Queue_attributes);
 8000894:	4a11      	ldr	r2, [pc, #68]	@ (80008dc <main+0x90>)
 8000896:	210e      	movs	r1, #14
 8000898:	2032      	movs	r0, #50	@ 0x32
 800089a:	f002 fdd6 	bl	800344a <osMessageQueueNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <main+0x94>)
 80008a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CAN1RX_Data_Pro */
  CAN1RX_Data_ProHandle = osThreadNew(CAN1RX_Data_Process_Func, NULL, &CAN1RX_Data_Pro_attributes);
 80008a4:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <main+0x98>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <main+0x9c>)
 80008aa:	f002 fd21 	bl	80032f0 <osThreadNew>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a0e      	ldr	r2, [pc, #56]	@ (80008ec <main+0xa0>)
 80008b2:	6013      	str	r3, [r2, #0]

  /* creation of CAN2RX_Data_Pro */
  CAN2RX_Data_ProHandle = osThreadNew(CAN2RX_Data_Process_Func, NULL, &CAN2RX_Data_Pro_attributes);
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <main+0xa4>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <main+0xa8>)
 80008ba:	f002 fd19 	bl	80032f0 <osThreadNew>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <main+0xac>)
 80008c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c4:	f002 fcee 	bl	80032a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <main+0x7c>
 80008cc:	2000010c 	.word	0x2000010c
 80008d0:	20000134 	.word	0x20000134
 80008d4:	08006438 	.word	0x08006438
 80008d8:	20000164 	.word	0x20000164
 80008dc:	08006450 	.word	0x08006450
 80008e0:	20000168 	.word	0x20000168
 80008e4:	080063f0 	.word	0x080063f0
 80008e8:	08000ba5 	.word	0x08000ba5
 80008ec:	2000015c 	.word	0x2000015c
 80008f0:	08006414 	.word	0x08006414
 80008f4:	08000c45 	.word	0x08000c45
 80008f8:	20000160 	.word	0x20000160

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	@ 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	@ 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f005 fc44 	bl	8006198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <SystemClock_Config+0xcc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000930:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <SystemClock_Config+0xd0>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000970:	23a8      	movs	r3, #168	@ 0xa8
 8000972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fcd5 	bl	8002330 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800098c:	f000 f9bc 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800099c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2105      	movs	r1, #5
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 ff36 	bl	8002820 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ba:	f000 f9a5 	bl	8000d08 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	@ 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 80009d8:	4a25      	ldr	r2, [pc, #148]	@ (8000a70 <MX_CAN1_Init+0xa0>)
 80009da:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 80009de:	2206      	movs	r2, #6
 80009e0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 80009f0:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80009f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 80009f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80009fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a24:	f000 fb86 	bl	8001134 <HAL_CAN_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a2e:	f000 f96b 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef can1FilterConfig;
   can1FilterConfig.FilterBank = 0;                           // Bank 0 for CAN1
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
   can1FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
   can1FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
   can1FilterConfig.FilterIdHigh = 0x0000;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
   can1FilterConfig.FilterIdLow = 0x0000;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
   can1FilterConfig.FilterMaskIdHigh = 0x0000;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
   can1FilterConfig.FilterMaskIdLow = 0x0000;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
   can1FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;  // ⬅️ FIFO0 for CAN1
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
   can1FilterConfig.FilterActivation = ENABLE;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
   can1FilterConfig.SlaveStartFilterBank = 14;                // Split point for CAN2
 8000a56:	230e      	movs	r3, #14
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
   HAL_CAN_ConfigFilter(&hcan1, &can1FilterConfig);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <MX_CAN1_Init+0x9c>)
 8000a60:	f000 fc64 	bl	800132c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	@ 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000010c 	.word	0x2000010c
 8000a70:	40006400 	.word	0x40006400

08000a74 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a7a:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000a7c:	4a25      	ldr	r2, [pc, #148]	@ (8000b14 <MX_CAN2_Init+0xa0>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000a80:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000a82:	2206      	movs	r2, #6
 8000a84:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a86:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000a94:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000a98:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000a9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000aa0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ac6:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <MX_CAN2_Init+0x9c>)
 8000ac8:	f000 fb34 	bl	8001134 <HAL_CAN_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000ad2:	f000 f919 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */


  CAN_FilterTypeDef can2FilterConfig;
  can2FilterConfig.FilterBank = 14;                          // Bank 14 for CAN2
 8000ad6:	230e      	movs	r3, #14
 8000ad8:	617b      	str	r3, [r7, #20]
  can2FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  can2FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  can2FilterConfig.FilterIdHigh = 0x0000;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
  can2FilterConfig.FilterIdLow = 0x0000;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  can2FilterConfig.FilterMaskIdHigh = 0x0000;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  can2FilterConfig.FilterMaskIdLow = 0x0000;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  can2FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;  // ⬅️ FIFO1 for CAN2
 8000af2:	2301      	movs	r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
  can2FilterConfig.FilterActivation = ENABLE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  can2FilterConfig.SlaveStartFilterBank = 14;
 8000afa:	230e      	movs	r3, #14
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &can2FilterConfig);           // ⬅️ Use hcan1 always in CAN2
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_CAN2_Init+0xa4>)
 8000b04:	f000 fc12 	bl	800132c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000134 	.word	0x20000134
 8000b14:	40006800 	.word	0x40006800
 8000b18:	2000010c 	.word	0x2000010c

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a16      	ldr	r2, [pc, #88]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_GPIO_Init+0x84>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <CAN1RX_Data_Process_Func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CAN1RX_Data_Process_Func */
void CAN1RX_Data_Process_Func(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Wait for and receive data from the queue
			  Status_CAN1 = osMessageQueueGet(CAN1RX_Data_QueueHandle, Received_CAN1RX, NULL, osWaitForever);
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <CAN1RX_Data_Process_Func+0x94>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	f107 0114 	add.w	r1, r7, #20
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f002 fd19 	bl	80035f0 <osMessageQueueGet>
 8000bbe:	6278      	str	r0, [r7, #36]	@ 0x24
			  if (Status_CAN1 == osOK)  {
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d134      	bne.n	8000c30 <CAN1RX_Data_Process_Func+0x8c>
				 // Process Received_CAN1RX data
				 // Indicate processing by toggling an LED, etc.

				 // Reconstruct uint32_t from bb (Little-endian format)
				CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8000bc6:	7f3b      	ldrb	r3, [r7, #28]
 8000bc8:	461a      	mov	r2, r3
									( Received_CAN1RX[9]  <<  8 ) |
 8000bca:	7f7b      	ldrb	r3, [r7, #29]
 8000bcc:	021b      	lsls	r3, r3, #8
				CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8000bce:	431a      	orrs	r2, r3
									( Received_CAN1RX[10] << 16 ) |
 8000bd0:	7fbb      	ldrb	r3, [r7, #30]
 8000bd2:	041b      	lsls	r3, r3, #16
									( Received_CAN1RX[9]  <<  8 ) |
 8000bd4:	431a      	orrs	r2, r3
									( Received_CAN1RX[11] << 24 );
 8000bd6:	7ffb      	ldrb	r3, [r7, #31]
 8000bd8:	061b      	lsls	r3, r3, #24
									( Received_CAN1RX[10] << 16 ) |
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	461a      	mov	r2, r3
				CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <CAN1RX_Data_Process_Func+0x98>)
 8000be0:	601a      	str	r2, [r3, #0]



				uint8_t CAN1_Data[8] = {Received_CAN1RX[0],Received_CAN1RX[1],Received_CAN1RX[2],Received_CAN1RX[3],
 8000be2:	7d3b      	ldrb	r3, [r7, #20]
 8000be4:	733b      	strb	r3, [r7, #12]
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	737b      	strb	r3, [r7, #13]
 8000bea:	7dbb      	ldrb	r3, [r7, #22]
 8000bec:	73bb      	strb	r3, [r7, #14]
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	73fb      	strb	r3, [r7, #15]
						Received_CAN1RX[4],Received_CAN1RX[5],Received_CAN1RX[6],Received_CAN1RX[7]};
 8000bf2:	7e3b      	ldrb	r3, [r7, #24]
				uint8_t CAN1_Data[8] = {Received_CAN1RX[0],Received_CAN1RX[1],Received_CAN1RX[2],Received_CAN1RX[3],
 8000bf4:	743b      	strb	r3, [r7, #16]
						Received_CAN1RX[4],Received_CAN1RX[5],Received_CAN1RX[6],Received_CAN1RX[7]};
 8000bf6:	7e7b      	ldrb	r3, [r7, #25]
				uint8_t CAN1_Data[8] = {Received_CAN1RX[0],Received_CAN1RX[1],Received_CAN1RX[2],Received_CAN1RX[3],
 8000bf8:	747b      	strb	r3, [r7, #17]
						Received_CAN1RX[4],Received_CAN1RX[5],Received_CAN1RX[6],Received_CAN1RX[7]};
 8000bfa:	7ebb      	ldrb	r3, [r7, #26]
				uint8_t CAN1_Data[8] = {Received_CAN1RX[0],Received_CAN1RX[1],Received_CAN1RX[2],Received_CAN1RX[3],
 8000bfc:	74bb      	strb	r3, [r7, #18]
						Received_CAN1RX[4],Received_CAN1RX[5],Received_CAN1RX[6],Received_CAN1RX[7]};
 8000bfe:	7efb      	ldrb	r3, [r7, #27]
				uint8_t CAN1_Data[8] = {Received_CAN1RX[0],Received_CAN1RX[1],Received_CAN1RX[2],Received_CAN1RX[3],
 8000c00:	74fb      	strb	r3, [r7, #19]


				if(Received_CAN1RX[12] == 0)  {
 8000c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d109      	bne.n	8000c1e <CAN1RX_Data_Process_Func+0x7a>
					if (CAN_TransmitMessage_Std_ID(&hcan2, CAN1RX_ID_Queue, CAN1_Data, Received_CAN1RX[13]) == HAL_OK)
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <CAN1RX_Data_Process_Func+0x98>)
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000c12:	f107 020c 	add.w	r2, r7, #12
 8000c16:	480a      	ldr	r0, [pc, #40]	@ (8000c40 <CAN1RX_Data_Process_Func+0x9c>)
 8000c18:	f7ff fc70 	bl	80004fc <CAN_TransmitMessage_Std_ID>
 8000c1c:	e008      	b.n	8000c30 <CAN1RX_Data_Process_Func+0x8c>
					else
					{
					// Transmission failed
					}
				} else {
						if (CAN_TransmitMessage_Ext_ID(&hcan2, CAN1RX_ID_Queue, CAN1_Data, Received_CAN1RX[13]) == HAL_OK)
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <CAN1RX_Data_Process_Func+0x98>)
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <CAN1RX_Data_Process_Func+0x9c>)
 8000c2c:	f7ff fc9c 	bl	8000568 <CAN_TransmitMessage_Ext_ID>
						}
				}

			 }

		     osDelay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f002 fbef 	bl	8003414 <osDelay>
			  Status_CAN1 = osMessageQueueGet(CAN1RX_Data_QueueHandle, Received_CAN1RX, NULL, osWaitForever);
 8000c36:	e7b9      	b.n	8000bac <CAN1RX_Data_Process_Func+0x8>
 8000c38:	20000164 	.word	0x20000164
 8000c3c:	200000b0 	.word	0x200000b0
 8000c40:	20000134 	.word	0x20000134

08000c44 <CAN2RX_Data_Process_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN2RX_Data_Process_Func */
void CAN2RX_Data_Process_Func(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
				 osStatus_t Status_CAN2;
  /* Infinite loop */
  for(;;)
  {
	  // Wait for and receive data from the queue
	 	 	 Status_CAN2 = osMessageQueueGet(CAN2RX_Data_QueueHandle, Received_CAN2RX, NULL, osWaitForever);
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <CAN2RX_Data_Process_Func+0x94>)
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	f107 0114 	add.w	r1, r7, #20
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f002 fcc9 	bl	80035f0 <osMessageQueueGet>
 8000c5e:	6278      	str	r0, [r7, #36]	@ 0x24
	 	 	 if (Status_CAN2 == osOK)  {
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d134      	bne.n	8000cd0 <CAN2RX_Data_Process_Func+0x8c>
	 	 		 // Process Received_CAN1RX data
	 	 		 // Indicate processing by toggling an LED, etc.

	 	 		 // Reconstruct uint32_t from bb (Little-endian format)
	 	 		CAN2RX_ID_Queue =   (Received_CAN2RX[8] << 0)  |
 8000c66:	7f3b      	ldrb	r3, [r7, #28]
 8000c68:	461a      	mov	r2, r3
	 	 							(Received_CAN2RX[9] << 8)  |
 8000c6a:	7f7b      	ldrb	r3, [r7, #29]
 8000c6c:	021b      	lsls	r3, r3, #8
	 	 		CAN2RX_ID_Queue =   (Received_CAN2RX[8] << 0)  |
 8000c6e:	431a      	orrs	r2, r3
	 	 							(Received_CAN2RX[10] << 16) |
 8000c70:	7fbb      	ldrb	r3, [r7, #30]
 8000c72:	041b      	lsls	r3, r3, #16
	 	 							(Received_CAN2RX[9] << 8)  |
 8000c74:	431a      	orrs	r2, r3
	 	 							(Received_CAN2RX[11] << 24);
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	061b      	lsls	r3, r3, #24
	 	 							(Received_CAN2RX[10] << 16) |
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	461a      	mov	r2, r3
	 	 		CAN2RX_ID_Queue =   (Received_CAN2RX[8] << 0)  |
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <CAN2RX_Data_Process_Func+0x98>)
 8000c80:	601a      	str	r2, [r3, #0]

	 	 		uint8_t CAN2_Data[8] = {Received_CAN2RX[0],Received_CAN2RX[1],Received_CAN2RX[2],Received_CAN2RX[3],
 8000c82:	7d3b      	ldrb	r3, [r7, #20]
 8000c84:	733b      	strb	r3, [r7, #12]
 8000c86:	7d7b      	ldrb	r3, [r7, #21]
 8000c88:	737b      	strb	r3, [r7, #13]
 8000c8a:	7dbb      	ldrb	r3, [r7, #22]
 8000c8c:	73bb      	strb	r3, [r7, #14]
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	73fb      	strb	r3, [r7, #15]
	 	 							Received_CAN2RX[4],Received_CAN2RX[5],Received_CAN2RX[6],Received_CAN2RX[7]};
 8000c92:	7e3b      	ldrb	r3, [r7, #24]
	 	 		uint8_t CAN2_Data[8] = {Received_CAN2RX[0],Received_CAN2RX[1],Received_CAN2RX[2],Received_CAN2RX[3],
 8000c94:	743b      	strb	r3, [r7, #16]
	 	 							Received_CAN2RX[4],Received_CAN2RX[5],Received_CAN2RX[6],Received_CAN2RX[7]};
 8000c96:	7e7b      	ldrb	r3, [r7, #25]
	 	 		uint8_t CAN2_Data[8] = {Received_CAN2RX[0],Received_CAN2RX[1],Received_CAN2RX[2],Received_CAN2RX[3],
 8000c98:	747b      	strb	r3, [r7, #17]
	 	 							Received_CAN2RX[4],Received_CAN2RX[5],Received_CAN2RX[6],Received_CAN2RX[7]};
 8000c9a:	7ebb      	ldrb	r3, [r7, #26]
	 	 		uint8_t CAN2_Data[8] = {Received_CAN2RX[0],Received_CAN2RX[1],Received_CAN2RX[2],Received_CAN2RX[3],
 8000c9c:	74bb      	strb	r3, [r7, #18]
	 	 							Received_CAN2RX[4],Received_CAN2RX[5],Received_CAN2RX[6],Received_CAN2RX[7]};
 8000c9e:	7efb      	ldrb	r3, [r7, #27]
	 	 		uint8_t CAN2_Data[8] = {Received_CAN2RX[0],Received_CAN2RX[1],Received_CAN2RX[2],Received_CAN2RX[3],
 8000ca0:	74fb      	strb	r3, [r7, #19]


	 	 					if(Received_CAN2RX[12] == 0)  {
 8000ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d109      	bne.n	8000cbe <CAN2RX_Data_Process_Func+0x7a>
	 	 						if (CAN_TransmitMessage_Std_ID(&hcan1, CAN2RX_ID_Queue, CAN2_Data, Received_CAN2RX[13]) == HAL_OK)
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <CAN2RX_Data_Process_Func+0x98>)
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000cb2:	f107 020c 	add.w	r2, r7, #12
 8000cb6:	480a      	ldr	r0, [pc, #40]	@ (8000ce0 <CAN2RX_Data_Process_Func+0x9c>)
 8000cb8:	f7ff fc20 	bl	80004fc <CAN_TransmitMessage_Std_ID>
 8000cbc:	e008      	b.n	8000cd0 <CAN2RX_Data_Process_Func+0x8c>
	 	 						else
	 	 						{
	 	 						// Transmission failed
	 	 						}
	 	 					} else {
	 	 							if (CAN_TransmitMessage_Ext_ID(&hcan1, CAN2RX_ID_Queue, CAN2_Data, Received_CAN2RX[13]) == HAL_OK)
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <CAN2RX_Data_Process_Func+0x98>)
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000cc6:	f107 020c 	add.w	r2, r7, #12
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <CAN2RX_Data_Process_Func+0x9c>)
 8000ccc:	f7ff fc4c 	bl	8000568 <CAN_TransmitMessage_Ext_ID>
	 	 							}
	 	 					}


	 	 	 }
	 	     osDelay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f002 fb9f 	bl	8003414 <osDelay>
	 	 	 Status_CAN2 = osMessageQueueGet(CAN2RX_Data_QueueHandle, Received_CAN2RX, NULL, osWaitForever);
 8000cd6:	e7b9      	b.n	8000c4c <CAN2RX_Data_Process_Func+0x8>
 8000cd8:	20000168 	.word	0x20000168
 8000cdc:	200000f4 	.word	0x200000f4
 8000ce0:	2000010c 	.word	0x2000010c

08000ce4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cf6:	f000 f9fd 	bl	80010f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40002000 	.word	0x40002000

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <Error_Handler+0x8>

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a11      	ldr	r2, [pc, #68]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <HAL_MspInit+0x54>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	210f      	movs	r1, #15
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	f001 f923 	bl	8001fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a4a      	ldr	r2, [pc, #296]	@ (8000eb4 <HAL_CAN_MspInit+0x148>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d13d      	bne.n	8000e0a <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb8 <HAL_CAN_MspInit+0x14c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a48      	ldr	r2, [pc, #288]	@ (8000eb8 <HAL_CAN_MspInit+0x14c>)
 8000d96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d98:	4b47      	ldr	r3, [pc, #284]	@ (8000eb8 <HAL_CAN_MspInit+0x14c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d10d      	bne.n	8000dbc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	4b45      	ldr	r3, [pc, #276]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	4a44      	ldr	r2, [pc, #272]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db0:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000de8:	2309      	movs	r3, #9
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4833      	ldr	r0, [pc, #204]	@ (8000ec0 <HAL_CAN_MspInit+0x154>)
 8000df4:	f001 f900 	bl	8001ff8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	2014      	movs	r0, #20
 8000dfe:	f001 f8d1 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e02:	2014      	movs	r0, #20
 8000e04:	f001 f8ea 	bl	8001fdc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e08:	e050      	b.n	8000eac <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec4 <HAL_CAN_MspInit+0x158>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d14b      	bne.n	8000eac <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b25      	ldr	r3, [pc, #148]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <HAL_CAN_MspInit+0x14c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	4a20      	ldr	r2, [pc, #128]	@ (8000eb8 <HAL_CAN_MspInit+0x14c>)
 8000e38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <HAL_CAN_MspInit+0x14c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10d      	bne.n	8000e5e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a15      	ldr	r2, [pc, #84]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_CAN_MspInit+0x150>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e7a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e8c:	2309      	movs	r3, #9
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <HAL_CAN_MspInit+0x15c>)
 8000e98:	f001 f8ae 	bl	8001ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2105      	movs	r1, #5
 8000ea0:	2041      	movs	r0, #65	@ 0x41
 8000ea2:	f001 f87f 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000ea6:	2041      	movs	r0, #65	@ 0x41
 8000ea8:	f001 f898 	bl	8001fdc <HAL_NVIC_EnableIRQ>
}
 8000eac:	bf00      	nop
 8000eae:	3730      	adds	r7, #48	@ 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40006400 	.word	0x40006400
 8000eb8:	2000016c 	.word	0x2000016c
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40006800 	.word	0x40006800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	@ 0x38
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <HAL_InitTick+0xe4>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	4a32      	ldr	r2, [pc, #200]	@ (8000fb0 <HAL_InitTick+0xe4>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <HAL_InitTick+0xe4>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef8:	f107 0210 	add.w	r2, r7, #16
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fe98 	bl	8002c38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d103      	bne.n	8000f1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f12:	f001 fe7d 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8000f16:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f18:	e004      	b.n	8000f24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f1a:	f001 fe79 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f26:	4a23      	ldr	r2, [pc, #140]	@ (8000fb4 <HAL_InitTick+0xe8>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	0c9b      	lsrs	r3, r3, #18
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f34:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <HAL_InitTick+0xf0>)
 8000f36:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f3e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000f40:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f44:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000f58:	4817      	ldr	r0, [pc, #92]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f5a:	f001 fe9f 	bl	8002c9c <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d11b      	bne.n	8000fa4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000f6c:	4812      	ldr	r0, [pc, #72]	@ (8000fb8 <HAL_InitTick+0xec>)
 8000f6e:	f001 feef 	bl	8002d50 <HAL_TIM_Base_Start_IT>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d111      	bne.n	8000fa4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f80:	202d      	movs	r0, #45	@ 0x2d
 8000f82:	f001 f82b 	bl	8001fdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d808      	bhi.n	8000f9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	202d      	movs	r0, #45	@ 0x2d
 8000f92:	f001 f807 	bl	8001fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_InitTick+0xf4>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e002      	b.n	8000fa4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3738      	adds	r7, #56	@ 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	431bde83 	.word	0x431bde83
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	40002000 	.word	0x40002000
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <CAN1_RX0_IRQHandler+0x10>)
 8001002:	f000 fcf1 	bl	80019e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000010c 	.word	0x2000010c

08001010 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001016:	f001 ff0b 	bl	8002e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000170 	.word	0x20000170

08001024 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <CAN2_RX1_IRQHandler+0x10>)
 800102a:	f000 fcdd 	bl	80019e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000134 	.word	0x20000134

08001038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001094 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001060:	f7ff ffea 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f005 f8eb 	bl	8006264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fbdd 	bl	800084c <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010a0:	08006490 	.word	0x08006490
  ldr r2, =_sbss
 80010a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010a8:	20004ce4 	.word	0x20004ce4

080010ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <HAL_Init+0x40>)
 80010ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <HAL_Init+0x40>)
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <HAL_Init+0x40>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 ff58 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	200f      	movs	r0, #15
 80010e0:	f7ff fef4 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fe16 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023c00 	.word	0x40023c00

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	200001b8 	.word	0x200001b8

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200001b8 	.word	0x200001b8

08001134 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0ed      	b.n	8001322 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fe0a 	bl	8000d6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001168:	f7ff ffd8 	bl	800111c <HAL_GetTick>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116e:	e012      	b.n	8001196 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001170:	f7ff ffd4 	bl	800111c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d90b      	bls.n	8001196 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001182:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2205      	movs	r2, #5
 800118e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0c5      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0e5      	beq.n	8001170 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0202 	bic.w	r2, r2, #2
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b4:	f7ff ffb2 	bl	800111c <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff ffae 	bl	800111c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e09f      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e1b      	ldrb	r3, [r3, #24]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0220 	bic.w	r2, r2, #32
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7edb      	ldrb	r3, [r3, #27]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0210 	bic.w	r2, r2, #16
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0208 	bic.w	r2, r2, #8
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7f5b      	ldrb	r3, [r3, #29]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	ea42 0103 	orr.w	r1, r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <HAL_CAN_ConfigFilter+0x20>
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b02      	cmp	r3, #2
 8001348:	f040 80be 	bne.w	80014c8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800134c:	4b65      	ldr	r3, [pc, #404]	@ (80014e4 <HAL_CAN_ConfigFilter+0x1b8>)
 800134e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001366:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	431a      	orrs	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2201      	movs	r2, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d123      	bne.n	80013f6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3248      	adds	r2, #72	@ 0x48
 80013d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	3348      	adds	r3, #72	@ 0x48
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d122      	bne.n	8001444 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	431a      	orrs	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800141e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3248      	adds	r2, #72	@ 0x48
 8001424:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001438:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	3348      	adds	r3, #72	@ 0x48
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d109      	bne.n	8001460 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800145e:	e007      	b.n	8001470 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	431a      	orrs	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800148a:	e007      	b.n	800149c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014ba:	f023 0201 	bic.w	r2, r3, #1
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e006      	b.n	80014d6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
  }
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40006400 	.word	0x40006400

080014e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12e      	bne.n	800155a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fe02 	bl	800111c <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800151a:	e012      	b.n	8001542 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151c:	f7ff fdfe 	bl	800111c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e012      	b.n	8001568 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e5      	bne.n	800151c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e006      	b.n	8001568 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d003      	beq.n	800159c <HAL_CAN_AddTxMessage+0x2c>
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	2b02      	cmp	r3, #2
 8001598:	f040 80ad 	bne.w	80016f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8095 	beq.w	80016e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	0e1b      	lsrs	r3, r3, #24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	6809      	ldr	r1, [r1, #0]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3318      	adds	r3, #24
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	440b      	add	r3, r1
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e00f      	b.n	8001614 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001608:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3318      	adds	r3, #24
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3318      	adds	r3, #24
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	440b      	add	r3, r1
 8001624:	3304      	adds	r3, #4
 8001626:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	7d1b      	ldrb	r3, [r3, #20]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d111      	bne.n	8001654 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3318      	adds	r3, #24
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6811      	ldr	r1, [r2, #0]
 8001644:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3318      	adds	r3, #24
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	440b      	add	r3, r1
 8001650:	3304      	adds	r3, #4
 8001652:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3307      	adds	r3, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	061a      	lsls	r2, r3, #24
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3306      	adds	r3, #6
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3305      	adds	r3, #5
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4313      	orrs	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	3204      	adds	r2, #4
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4610      	mov	r0, r2
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	6811      	ldr	r1, [r2, #0]
 800167c:	ea43 0200 	orr.w	r2, r3, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800168a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3303      	adds	r3, #3
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	061a      	lsls	r2, r3, #24
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3302      	adds	r3, #2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3301      	adds	r3, #1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4313      	orrs	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4610      	mov	r0, r2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	ea43 0200 	orr.w	r2, r3, r0
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3318      	adds	r3, #24
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	6811      	ldr	r1, [r2, #0]
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3318      	adds	r3, #24
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e00e      	b.n	8001704 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e006      	b.n	8001704 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
  }
}
 8001704:	4618      	mov	r0, r3
 8001706:	3724      	adds	r7, #36	@ 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <HAL_CAN_IsTxMessagePending+0x22>
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d10b      	bne.n	800174a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	069b      	lsls	r3, r3, #26
 800173c:	401a      	ands	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	069b      	lsls	r3, r3, #26
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d003      	beq.n	800177c <HAL_CAN_GetRxMessage+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b02      	cmp	r3, #2
 8001778:	f040 8103 	bne.w	8001982 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d116      	bne.n	80017be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0f7      	b.n	8001990 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0e8      	b.n	8001990 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	331b      	adds	r3, #27
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0204 	and.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	331b      	adds	r3, #27
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e00b      	b.n	800180e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	331b      	adds	r3, #27
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	331b      	adds	r3, #27
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0202 	and.w	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	331b      	adds	r3, #27
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2208      	movs	r2, #8
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	e00b      	b.n	800185c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	331b      	adds	r3, #27
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 020f 	and.w	r2, r3, #15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	331b      	adds	r3, #27
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	3304      	adds	r3, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	331b      	adds	r3, #27
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	3304      	adds	r3, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0a1a      	lsrs	r2, r3, #8
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0c1a      	lsrs	r2, r3, #16
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3302      	adds	r3, #2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e1a      	lsrs	r2, r3, #24
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3303      	adds	r3, #3
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	3304      	adds	r3, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0a1a      	lsrs	r2, r3, #8
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3305      	adds	r3, #5
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0c1a      	lsrs	r2, r3, #16
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3306      	adds	r3, #6
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0e1a      	lsrs	r2, r3, #24
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3307      	adds	r3, #7
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d108      	bne.n	800196e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	e007      	b.n	800197e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0220 	orr.w	r2, r2, #32
 800197c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e006      	b.n	8001990 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d002      	beq.n	80019ba <HAL_CAN_ActivateNotification+0x1e>
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d109      	bne.n	80019ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6959      	ldr	r1, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e006      	b.n	80019dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
  }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d07c      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d023      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f983 	bl	8001d56 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a50:	e016      	b.n	8001a80 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a64:	e00c      	b.n	8001a80 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	e002      	b.n	8001a80 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f989 	bl	8001d92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f963 	bl	8001d6a <HAL_CAN_TxMailbox1CompleteCallback>
 8001aa4:	e016      	b.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab8:	e00c      	b.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	e002      	b.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f969 	bl	8001da6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ae6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f943 	bl	8001d7e <HAL_CAN_TxMailbox2CompleteCallback>
 8001af8:	e016      	b.n	8001b28 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0c:	e00c      	b.n	8001b28 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b20:	e002      	b.n	8001b28 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f949 	bl	8001dba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f930 	bl	8001dce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fd22 	bl	80005d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2210      	movs	r2, #16
 8001bae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f908 	bl	8001de2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7fe fd84 	bl	80006f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8f2 	bl	8001df6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8eb 	bl	8001e0a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d07b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d072      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d043      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03e      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb6:	2b60      	cmp	r3, #96	@ 0x60
 8001cb8:	d02b      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x32a>
 8001cba:	2b60      	cmp	r3, #96	@ 0x60
 8001cbc:	d82e      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cbe:	2b50      	cmp	r3, #80	@ 0x50
 8001cc0:	d022      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x320>
 8001cc2:	2b50      	cmp	r3, #80	@ 0x50
 8001cc4:	d82a      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cc6:	2b40      	cmp	r3, #64	@ 0x40
 8001cc8:	d019      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x316>
 8001cca:	2b40      	cmp	r3, #64	@ 0x40
 8001ccc:	d826      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cce:	2b30      	cmp	r3, #48	@ 0x30
 8001cd0:	d010      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x30c>
 8001cd2:	2b30      	cmp	r3, #48	@ 0x30
 8001cd4:	d822      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d002      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x2f8>
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d005      	beq.n	8001cea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cde:	e01d      	b.n	8001d1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ce8:	e019      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cf2:	e014      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	f043 0320 	orr.w	r3, r3, #32
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cfc:	e00f      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d06:	e00a      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d10:	e005      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d1a:	e000      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            break;
 8001d1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2204      	movs	r2, #4
 8001d34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f868 	bl	8001e1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	@ (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	@ (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	@ 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4c 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb6:	f7ff ff61 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff ffb1 	bl	8001f28 <NVIC_EncodePriority>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff80 	bl	8001ed4 <__NVIC_SetPriority>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e16b      	b.n	80022ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 815a 	bne.w	80022e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b4 	beq.w	80022e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	4a5f      	ldr	r2, [pc, #380]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218c:	6453      	str	r3, [r2, #68]	@ 0x44
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a5b      	ldr	r2, [pc, #364]	@ (8002308 <HAL_GPIO_Init+0x310>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	@ (800230c <HAL_GPIO_Init+0x314>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_GPIO_Init+0x226>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a51      	ldr	r2, [pc, #324]	@ (8002310 <HAL_GPIO_Init+0x318>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x222>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a50      	ldr	r2, [pc, #320]	@ (8002314 <HAL_GPIO_Init+0x31c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x21e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002318 <HAL_GPIO_Init+0x320>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x21a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	@ (800231c <HAL_GPIO_Init+0x324>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x216>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <HAL_GPIO_Init+0x328>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x212>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_GPIO_Init+0x32c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x20e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_GPIO_Init+0x330>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x20a>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002202:	2308      	movs	r3, #8
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x310>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a32      	ldr	r2, [pc, #200]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_GPIO_Init+0x334>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a27      	ldr	r2, [pc, #156]	@ (800232c <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b26      	ldr	r3, [pc, #152]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a12      	ldr	r2, [pc, #72]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae90 	bls.w	8002014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e267      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800234e:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d00c      	beq.n	8002374 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b85      	ldr	r3, [pc, #532]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002362:	2b08      	cmp	r3, #8
 8002364:	d112      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002366:	4b82      	ldr	r3, [pc, #520]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002372:	d10b      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b7e      	ldr	r3, [pc, #504]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d05b      	beq.n	8002438 <HAL_RCC_OscConfig+0x108>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d157      	bne.n	8002438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e242      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x74>
 8002396:	4b76      	ldr	r3, [pc, #472]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e01d      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6c      	ldr	r2, [pc, #432]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023c8:	4b69      	ldr	r3, [pc, #420]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a68      	ldr	r2, [pc, #416]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a65      	ldr	r2, [pc, #404]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fe98 	bl	800111c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fe94 	bl	800111c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	@ 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e207      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b5b      	ldr	r3, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0xc0>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fe84 	bl	800111c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe fe80 	bl	800111c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1f3      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	4b51      	ldr	r3, [pc, #324]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0xe8>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d063      	beq.n	800250e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002446:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b47      	ldr	r3, [pc, #284]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800245a:	2b08      	cmp	r3, #8
 800245c:	d11c      	bne.n	8002498 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	4b41      	ldr	r3, [pc, #260]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x152>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e1c7      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b3b      	ldr	r3, [pc, #236]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4937      	ldr	r1, [pc, #220]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	e03a      	b.n	800250e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a0:	4b34      	ldr	r3, [pc, #208]	@ (8002574 <HAL_RCC_OscConfig+0x244>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fe39 	bl	800111c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fe35 	bl	800111c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1a8      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4925      	ldr	r1, [pc, #148]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <HAL_RCC_OscConfig+0x244>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe18 	bl	800111c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe fe14 	bl	800111c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e187      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d036      	beq.n	8002588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <HAL_RCC_OscConfig+0x248>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fdf8 	bl	800111c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fdf4 	bl	800111c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e167      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_OscConfig+0x240>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x200>
 800254e:	e01b      	b.n	8002588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_OscConfig+0x248>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe fde1 	bl	800111c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	e00e      	b.n	800257c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255e:	f7fe fddd 	bl	800111c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d907      	bls.n	800257c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e150      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	42470000 	.word	0x42470000
 8002578:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b88      	ldr	r3, [pc, #544]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800257e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ea      	bne.n	800255e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8097 	beq.w	80026c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b81      	ldr	r3, [pc, #516]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	4b7d      	ldr	r3, [pc, #500]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	4a7c      	ldr	r2, [pc, #496]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b6:	4b7a      	ldr	r3, [pc, #488]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b77      	ldr	r3, [pc, #476]	@ (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b74      	ldr	r3, [pc, #464]	@ (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a73      	ldr	r2, [pc, #460]	@ (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fd9d 	bl	800111c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fd99 	bl	800111c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e10c      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x2ea>
 800260c:	4b64      	ldr	r3, [pc, #400]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	4a63      	ldr	r2, [pc, #396]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	@ 0x70
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x324>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x30c>
 8002622:	4b5f      	ldr	r3, [pc, #380]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	4a5e      	ldr	r2, [pc, #376]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6713      	str	r3, [r2, #112]	@ 0x70
 800262e:	4b5c      	ldr	r3, [pc, #368]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	4a5b      	ldr	r2, [pc, #364]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	@ 0x70
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x324>
 800263c:	4b58      	ldr	r3, [pc, #352]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002640:	4a57      	ldr	r2, [pc, #348]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	@ 0x70
 8002648:	4b55      	ldr	r3, [pc, #340]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264c:	4a54      	ldr	r2, [pc, #336]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe fd5e 	bl	800111c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe fd5a 	bl	800111c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0cb      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	4b49      	ldr	r3, [pc, #292]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ee      	beq.n	8002664 <HAL_RCC_OscConfig+0x334>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7fe fd48 	bl	800111c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe fd44 	bl	800111c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0b5      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b39      	ldr	r3, [pc, #228]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	4a38      	ldr	r2, [pc, #224]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a1 	beq.w	8002810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ce:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d05c      	beq.n	8002794 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d141      	bne.n	8002766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b31      	ldr	r3, [pc, #196]	@ (80027a8 <HAL_RCC_OscConfig+0x478>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fd18 	bl	800111c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fd14 	bl	800111c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e087      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	491b      	ldr	r1, [pc, #108]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x478>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fced 	bl	800111c <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fce9 	bl	800111c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e05c      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x416>
 8002764:	e054      	b.n	8002810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_RCC_OscConfig+0x478>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fcd6 	bl	800111c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fcd2 	bl	800111c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e045      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x444>
 8002792:	e03d      	b.n	8002810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e038      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000
 80027a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x4ec>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d028      	beq.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d121      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11a      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0cc      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b68      	ldr	r3, [pc, #416]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d90c      	bls.n	800285c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b63      	ldr	r3, [pc, #396]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b8      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b59      	ldr	r3, [pc, #356]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a58      	ldr	r2, [pc, #352]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b53      	ldr	r3, [pc, #332]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494d      	ldr	r1, [pc, #308]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d044      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b47      	ldr	r3, [pc, #284]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d003      	beq.n	80028de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3b      	ldr	r3, [pc, #236]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e067      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4934      	ldr	r1, [pc, #208]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fc04 	bl	800111c <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fc00 	bl	800111c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2b      	ldr	r3, [pc, #172]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d20c      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e032      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4916      	ldr	r1, [pc, #88]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490e      	ldr	r1, [pc, #56]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 f821 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490a      	ldr	r1, [pc, #40]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fa80 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08006468 	.word	0x08006468
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b094      	sub	sp, #80	@ 0x50
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a04:	4b79      	ldr	r3, [pc, #484]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x40>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	f200 80e1 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1e:	e0db      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b73      	ldr	r3, [pc, #460]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a24:	e0db      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b73      	ldr	r3, [pc, #460]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a2a:	e0d8      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a36:	4b6d      	ldr	r3, [pc, #436]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a56:	2300      	movs	r3, #0
 8002a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a5e:	4622      	mov	r2, r4
 8002a60:	462b      	mov	r3, r5
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	0159      	lsls	r1, r3, #5
 8002a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a70:	0150      	lsls	r0, r2, #5
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4621      	mov	r1, r4
 8002a78:	1a51      	subs	r1, r2, r1
 8002a7a:	6139      	str	r1, [r7, #16]
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a90:	4659      	mov	r1, fp
 8002a92:	018b      	lsls	r3, r1, #6
 8002a94:	4651      	mov	r1, sl
 8002a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	018a      	lsls	r2, r1, #6
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002abe:	4690      	mov	r8, r2
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	eb18 0303 	adds.w	r3, r8, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	462b      	mov	r3, r5
 8002acc:	eb49 0303 	adc.w	r3, r9, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	024b      	lsls	r3, r1, #9
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ae8:	4621      	mov	r1, r4
 8002aea:	024a      	lsls	r2, r1, #9
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002afc:	f7fd fb68 	bl	80001d0 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b08:	e058      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	4611      	mov	r1, r2
 8002b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	0159      	lsls	r1, r3, #5
 8002b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b36:	0150      	lsls	r0, r2, #5
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b42:	4649      	mov	r1, r9
 8002b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b60:	eb63 050b 	sbc.w	r5, r3, fp
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	00eb      	lsls	r3, r5, #3
 8002b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b72:	00e2      	lsls	r2, r4, #3
 8002b74:	4614      	mov	r4, r2
 8002b76:	461d      	mov	r5, r3
 8002b78:	4643      	mov	r3, r8
 8002b7a:	18e3      	adds	r3, r4, r3
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	464b      	mov	r3, r9
 8002b80:	eb45 0303 	adc.w	r3, r5, r3
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b92:	4629      	mov	r1, r5
 8002b94:	028b      	lsls	r3, r1, #10
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	028a      	lsls	r2, r1, #10
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	61fa      	str	r2, [r7, #28]
 8002bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb0:	f7fd fb0e 	bl	80001d0 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3750      	adds	r7, #80	@ 0x50
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a9b      	lsrs	r3, r3, #10
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08006478 	.word	0x08006478

08002c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	220f      	movs	r2, #15
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_RCC_GetClockConfig+0x5c>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_RCC_GetClockConfig+0x5c>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_RCC_GetClockConfig+0x5c>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	08db      	lsrs	r3, r3, #3
 8002c72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_RCC_GetClockConfig+0x60>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0207 	and.w	r2, r3, #7
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e041      	b.n	8002d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f839 	bl	8002d3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 f9c0 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e04e      	b.n	8002e06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d022      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d92:	d01d      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	@ (8002e18 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_TIM_Base_Start_IT+0xcc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	@ (8002e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <HAL_TIM_Base_Start_IT+0xd4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	@ (8002e28 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d111      	bne.n	8002df4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d010      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	e007      	b.n	8002e04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40010400 	.word	0x40010400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40001800 	.word	0x40001800

08002e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d020      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0202 	mvn.w	r2, #2
 8002e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f8d2 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8c4 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f8d5 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d020      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0204 	mvn.w	r2, #4
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8ac 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f89e 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8af 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d020      	beq.n	8002f2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01b      	beq.n	8002f2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0208 	mvn.w	r2, #8
 8002efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2204      	movs	r2, #4
 8002f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f886 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002f18:	e005      	b.n	8002f26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f878 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f889 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d020      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0210 	mvn.w	r2, #16
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f860 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f852 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f863 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0201 	mvn.w	r2, #1
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fea4 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f900 	bl	80031c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f834 	bl	800304c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0220 	mvn.w	r2, #32
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8d2 	bl	80031ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a43      	ldr	r2, [pc, #268]	@ (8003180 <TIM_Base_SetConfig+0x120>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307e:	d00f      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a40      	ldr	r2, [pc, #256]	@ (8003184 <TIM_Base_SetConfig+0x124>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00b      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3f      	ldr	r2, [pc, #252]	@ (8003188 <TIM_Base_SetConfig+0x128>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3e      	ldr	r2, [pc, #248]	@ (800318c <TIM_Base_SetConfig+0x12c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3d      	ldr	r2, [pc, #244]	@ (8003190 <TIM_Base_SetConfig+0x130>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <TIM_Base_SetConfig+0x120>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c0:	d027      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003184 <TIM_Base_SetConfig+0x124>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d023      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003188 <TIM_Base_SetConfig+0x128>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2d      	ldr	r2, [pc, #180]	@ (800318c <TIM_Base_SetConfig+0x12c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <TIM_Base_SetConfig+0x130>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d017      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <TIM_Base_SetConfig+0x134>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003198 <TIM_Base_SetConfig+0x138>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a29      	ldr	r2, [pc, #164]	@ (800319c <TIM_Base_SetConfig+0x13c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a28      	ldr	r2, [pc, #160]	@ (80031a0 <TIM_Base_SetConfig+0x140>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a27      	ldr	r2, [pc, #156]	@ (80031a4 <TIM_Base_SetConfig+0x144>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <TIM_Base_SetConfig+0x148>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <TIM_Base_SetConfig+0x120>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0xf2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a10      	ldr	r2, [pc, #64]	@ (8003190 <TIM_Base_SetConfig+0x130>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d103      	bne.n	800315a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f043 0204 	orr.w	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	601a      	str	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40010400 	.word	0x40010400
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800
 80031a0:	40001800 	.word	0x40001800
 80031a4:	40001c00 	.word	0x40001c00
 80031a8:	40002000 	.word	0x40002000

080031ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <__NVIC_SetPriority>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	@ (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	@ (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <SysTick_Handler+0x1c>)
 800322e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003230:	f001 ff34 	bl	800509c <xTaskGetSchedulerState>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800323a:	f002 fd2d 	bl	8005c98 <xPortSysTickHandler>
  }
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800324c:	2100      	movs	r1, #0
 800324e:	f06f 0004 	mvn.w	r0, #4
 8003252:	f7ff ffbf 	bl	80031d4 <__NVIC_SetPriority>
#endif
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003262:	f3ef 8305 	mrs	r3, IPSR
 8003266:	603b      	str	r3, [r7, #0]
  return(result);
 8003268:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800326e:	f06f 0305 	mvn.w	r3, #5
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	e00c      	b.n	8003290 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <osKernelInitialize+0x44>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800327e:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <osKernelInitialize+0x44>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003284:	2300      	movs	r3, #0
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	e002      	b.n	8003290 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800328e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	200001bc 	.word	0x200001bc

080032a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032aa:	f3ef 8305 	mrs	r3, IPSR
 80032ae:	603b      	str	r3, [r7, #0]
  return(result);
 80032b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <osKernelStart+0x1a>
    stat = osErrorISR;
 80032b6:	f06f 0305 	mvn.w	r3, #5
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e010      	b.n	80032e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032be:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <osKernelStart+0x48>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d109      	bne.n	80032da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032c6:	f7ff ffbf 	bl	8003248 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032ca:	4b08      	ldr	r3, [pc, #32]	@ (80032ec <osKernelStart+0x48>)
 80032cc:	2202      	movs	r2, #2
 80032ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032d0:	f001 fa80 	bl	80047d4 <vTaskStartScheduler>
      stat = osOK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	e002      	b.n	80032e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032e0:	687b      	ldr	r3, [r7, #4]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200001bc 	.word	0x200001bc

080032f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	@ 0x38
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003300:	f3ef 8305 	mrs	r3, IPSR
 8003304:	617b      	str	r3, [r7, #20]
  return(result);
 8003306:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003308:	2b00      	cmp	r3, #0
 800330a:	d17e      	bne.n	800340a <osThreadNew+0x11a>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d07b      	beq.n	800340a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003316:	2318      	movs	r3, #24
 8003318:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003322:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d045      	beq.n	80033b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <osThreadNew+0x48>
        name = attr->name;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <osThreadNew+0x6e>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b38      	cmp	r3, #56	@ 0x38
 8003350:	d805      	bhi.n	800335e <osThreadNew+0x6e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <osThreadNew+0x72>
        return (NULL);
 800335e:	2300      	movs	r3, #0
 8003360:	e054      	b.n	800340c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <osThreadNew+0xa8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003380:	d90a      	bls.n	8003398 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003386:	2b00      	cmp	r3, #0
 8003388:	d006      	beq.n	8003398 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <osThreadNew+0xa8>
        mem = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	e010      	b.n	80033ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10c      	bne.n	80033ba <osThreadNew+0xca>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d108      	bne.n	80033ba <osThreadNew+0xca>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d104      	bne.n	80033ba <osThreadNew+0xca>
          mem = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e001      	b.n	80033ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d110      	bne.n	80033e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033c8:	9202      	str	r2, [sp, #8]
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f001 f808 	bl	80043ec <xTaskCreateStatic>
 80033dc:	4603      	mov	r3, r0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	e013      	b.n	800340a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d110      	bne.n	800340a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f001 f856 	bl	80044ac <xTaskCreate>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <osThreadNew+0x11a>
            hTask = NULL;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800340a:	693b      	ldr	r3, [r7, #16]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3728      	adds	r7, #40	@ 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800341c:	f3ef 8305 	mrs	r3, IPSR
 8003420:	60bb      	str	r3, [r7, #8]
  return(result);
 8003422:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <osDelay+0x1c>
    stat = osErrorISR;
 8003428:	f06f 0305 	mvn.w	r3, #5
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e007      	b.n	8003440 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <osDelay+0x2c>
      vTaskDelay(ticks);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f001 f994 	bl	8004768 <vTaskDelay>
    }
  }

  return (stat);
 8003440:	68fb      	ldr	r3, [r7, #12]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800344a:	b580      	push	{r7, lr}
 800344c:	b08a      	sub	sp, #40	@ 0x28
 800344e:	af02      	add	r7, sp, #8
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800345a:	f3ef 8305 	mrs	r3, IPSR
 800345e:	613b      	str	r3, [r7, #16]
  return(result);
 8003460:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003462:	2b00      	cmp	r3, #0
 8003464:	d15f      	bne.n	8003526 <osMessageQueueNew+0xdc>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d05c      	beq.n	8003526 <osMessageQueueNew+0xdc>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d059      	beq.n	8003526 <osMessageQueueNew+0xdc>
    mem = -1;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003476:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d029      	beq.n	80034d2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <osMessageQueueNew+0x62>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b4f      	cmp	r3, #79	@ 0x4f
 800348c:	d90e      	bls.n	80034ac <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <osMessageQueueNew+0x62>
        mem = 1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e014      	b.n	80034d6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d110      	bne.n	80034d6 <osMessageQueueNew+0x8c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d108      	bne.n	80034d6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <osMessageQueueNew+0x8c>
          mem = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e001      	b.n	80034d6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10b      	bne.n	80034f4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2100      	movs	r1, #0
 80034e6:	9100      	str	r1, [sp, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa30 	bl	8003950 <xQueueGenericCreateStatic>
 80034f0:	61f8      	str	r0, [r7, #28]
 80034f2:	e008      	b.n	8003506 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80034fa:	2200      	movs	r2, #0
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 faa3 	bl	8003a4a <xQueueGenericCreate>
 8003504:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00c      	beq.n	8003526 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <osMessageQueueNew+0xd0>
        name = attr->name;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e001      	b.n	800351e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800351e:	6979      	ldr	r1, [r7, #20]
 8003520:	69f8      	ldr	r0, [r7, #28]
 8003522:	f000 ff05 	bl	8004330 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003526:	69fb      	ldr	r3, [r7, #28]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003548:	f3ef 8305 	mrs	r3, IPSR
 800354c:	617b      	str	r3, [r7, #20]
  return(result);
 800354e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003550:	2b00      	cmp	r3, #0
 8003552:	d028      	beq.n	80035a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <osMessageQueuePut+0x36>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <osMessageQueuePut+0x36>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003566:	f06f 0303 	mvn.w	r3, #3
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	e038      	b.n	80035e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003572:	f107 0210 	add.w	r2, r7, #16
 8003576:	2300      	movs	r3, #0
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	69b8      	ldr	r0, [r7, #24]
 800357c:	f000 fbc6 	bl	8003d0c <xQueueGenericSendFromISR>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d003      	beq.n	800358e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003586:	f06f 0302 	mvn.w	r3, #2
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e028      	b.n	80035e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d025      	beq.n	80035e0 <osMessageQueuePut+0xb0>
 8003594:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <osMessageQueuePut+0xbc>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	e01c      	b.n	80035e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <osMessageQueuePut+0x82>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80035b2:	f06f 0303 	mvn.w	r3, #3
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e012      	b.n	80035e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035ba:	2300      	movs	r3, #0
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	69b8      	ldr	r0, [r7, #24]
 80035c2:	f000 faa1 	bl	8003b08 <xQueueGenericSend>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d009      	beq.n	80035e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80035d2:	f06f 0301 	mvn.w	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e002      	b.n	80035e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80035da:	f06f 0302 	mvn.w	r3, #2
 80035de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80035e0:	69fb      	ldr	r3, [r7, #28]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003606:	f3ef 8305 	mrs	r3, IPSR
 800360a:	617b      	str	r3, [r7, #20]
  return(result);
 800360c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <osMessageQueueGet+0x34>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <osMessageQueueGet+0x34>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003624:	f06f 0303 	mvn.w	r3, #3
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e037      	b.n	800369c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003630:	f107 0310 	add.w	r3, r7, #16
 8003634:	461a      	mov	r2, r3
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	69b8      	ldr	r0, [r7, #24]
 800363a:	f000 fce7 	bl	800400c <xQueueReceiveFromISR>
 800363e:	4603      	mov	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d003      	beq.n	800364c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003644:	f06f 0302 	mvn.w	r3, #2
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e027      	b.n	800369c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d024      	beq.n	800369c <osMessageQueueGet+0xac>
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <osMessageQueueGet+0xb8>)
 8003654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	e01b      	b.n	800369c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <osMessageQueueGet+0x80>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003670:	f06f 0303 	mvn.w	r3, #3
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e011      	b.n	800369c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f000 fbe3 	bl	8003e48 <xQueueReceive>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d009      	beq.n	800369c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800368e:	f06f 0301 	mvn.w	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	e002      	b.n	800369c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003696:	f06f 0302 	mvn.w	r3, #2
 800369a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800369c:	69fb      	ldr	r3, [r7, #28]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a07      	ldr	r2, [pc, #28]	@ (80036d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80036bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <vApplicationGetIdleTaskMemory+0x30>)
 80036c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2280      	movs	r2, #128	@ 0x80
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	200001c0 	.word	0x200001c0
 80036dc:	20000268 	.word	0x20000268

080036e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a07      	ldr	r2, [pc, #28]	@ (800370c <vApplicationGetTimerTaskMemory+0x2c>)
 80036f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4a06      	ldr	r2, [pc, #24]	@ (8003710 <vApplicationGetTimerTaskMemory+0x30>)
 80036f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000468 	.word	0x20000468
 8003710:	20000510 	.word	0x20000510

08003714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0208 	add.w	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800372c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f103 0208 	add.w	r2, r3, #8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f103 0208 	add.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037cc:	d103      	bne.n	80037d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e00c      	b.n	80037f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3308      	adds	r3, #8
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e002      	b.n	80037e4 <vListInsert+0x2e>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d2f6      	bcs.n	80037de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	601a      	str	r2, [r3, #0]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6852      	ldr	r2, [r2, #4]
 8003848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d103      	bne.n	800385c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1e5a      	subs	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038a8:	f002 f966 	bl	8005b78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	68f9      	ldr	r1, [r7, #12]
 80038b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	3b01      	subs	r3, #1
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	22ff      	movs	r2, #255	@ 0xff
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	22ff      	movs	r2, #255	@ 0xff
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d114      	bne.n	8003928 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01a      	beq.n	800393c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3310      	adds	r3, #16
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fa00 	bl	8004d10 <xTaskRemoveFromEventList>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d012      	beq.n	800393c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <xQueueGenericReset+0xd0>)
 8003918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	e009      	b.n	800393c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3310      	adds	r3, #16
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fef1 	bl	8003714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3324      	adds	r3, #36	@ 0x24
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff feec 	bl	8003714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800393c:	f002 f94e 	bl	8005bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003940:	2301      	movs	r3, #1
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	e000ed04 	.word	0xe000ed04

08003950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	@ 0x38
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <xQueueGenericCreateStatic+0x56>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <xQueueGenericCreateStatic+0x5a>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <xQueueGenericCreateStatic+0x5c>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	623b      	str	r3, [r7, #32]
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <xQueueGenericCreateStatic+0x84>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <xQueueGenericCreateStatic+0x88>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <xQueueGenericCreateStatic+0x8a>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	61fb      	str	r3, [r7, #28]
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	e7fd      	b.n	80039f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039f6:	2350      	movs	r3, #80	@ 0x50
 80039f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b50      	cmp	r3, #80	@ 0x50
 80039fe:	d00b      	beq.n	8003a18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61bb      	str	r3, [r7, #24]
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f840 	bl	8003ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	@ 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b08a      	sub	sp, #40	@ 0x28
 8003a4e:	af02      	add	r7, sp, #8
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	613b      	str	r3, [r7, #16]
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3350      	adds	r3, #80	@ 0x50
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f999 	bl	8005dbc <pvPortMalloc>
 8003a8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d011      	beq.n	8003ab6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3350      	adds	r3, #80	@ 0x50
 8003a9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003aa4:	79fa      	ldrb	r2, [r7, #7]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f805 	bl	8003ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aee:	2101      	movs	r1, #1
 8003af0:	69b8      	ldr	r0, [r7, #24]
 8003af2:	f7ff fec3 	bl	800387c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08e      	sub	sp, #56	@ 0x38
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b16:	2300      	movs	r3, #0
 8003b18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xQueueGenericSend+0x34>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <xQueueGenericSend+0x42>
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericSend+0x46>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericSend+0x48>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <xQueueGenericSend+0x64>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x72>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <xQueueGenericSend+0x76>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <xQueueGenericSend+0x78>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <xQueueGenericSend+0x94>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	623b      	str	r3, [r7, #32]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b9c:	f001 fa7e 	bl	800509c <xTaskGetSchedulerState>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <xQueueGenericSend+0xa4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <xQueueGenericSend+0xa8>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <xQueueGenericSend+0xaa>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <xQueueGenericSend+0xc6>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61fb      	str	r3, [r7, #28]
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	e7fd      	b.n	8003bca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bce:	f001 ffd3 	bl	8005b78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <xQueueGenericSend+0xdc>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d129      	bne.n	8003c38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bea:	f000 fa91 	bl	8004110 <prvCopyDataToQueue>
 8003bee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	3324      	adds	r3, #36	@ 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f887 	bl	8004d10 <xTaskRemoveFromEventList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c08:	4b3f      	ldr	r3, [pc, #252]	@ (8003d08 <xQueueGenericSend+0x200>)
 8003c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	e00a      	b.n	8003c30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <xQueueGenericSend+0x200>)
 8003c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c30:	f001 ffd4 	bl	8005bdc <vPortExitCritical>
				return pdPASS;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e063      	b.n	8003d00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c3e:	f001 ffcd 	bl	8005bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e05c      	b.n	8003d00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f8c1 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c5a:	f001 ffbf 	bl	8005bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c5e:	f000 fe29 	bl	80048b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c62:	f001 ff89 	bl	8005b78 <vPortEnterCritical>
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c72:	d103      	bne.n	8003c7c <xQueueGenericSend+0x174>
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c88:	d103      	bne.n	8003c92 <xQueueGenericSend+0x18a>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c92:	f001 ffa3 	bl	8005bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c96:	1d3a      	adds	r2, r7, #4
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f8b0 	bl	8004e04 <xTaskCheckForTimeOut>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d124      	bne.n	8003cf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003caa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cac:	f000 fb28 	bl	8004300 <prvIsQueueFull>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	3310      	adds	r3, #16
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ffd4 	bl	8004c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc6:	f000 fab3 	bl	8004230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cca:	f000 fe01 	bl	80048d0 <xTaskResumeAll>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f af7c 	bne.w	8003bce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <xQueueGenericSend+0x200>)
 8003cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	e772      	b.n	8003bce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cea:	f000 faa1 	bl	8004230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cee:	f000 fdef 	bl	80048d0 <xTaskResumeAll>
 8003cf2:	e76c      	b.n	8003bce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cf6:	f000 fa9b 	bl	8004230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cfa:	f000 fde9 	bl	80048d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3738      	adds	r7, #56	@ 0x38
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b090      	sub	sp, #64	@ 0x40
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <xQueueGenericSendFromISR+0x3e>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <xQueueGenericSendFromISR+0x42>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <xQueueGenericSendFromISR+0x44>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d103      	bne.n	8003d7a <xQueueGenericSendFromISR+0x6e>
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericSendFromISR+0x72>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericSendFromISR+0x74>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	623b      	str	r3, [r7, #32]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d9c:	f001 ffcc 	bl	8005d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003da0:	f3ef 8211 	mrs	r2, BASEPRI
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	61fa      	str	r2, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003db8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <xQueueGenericSendFromISR+0xc2>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d12f      	bne.n	8003e2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003de4:	f000 f994 	bl	8004110 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003de8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003df0:	d112      	bne.n	8003e18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfc:	3324      	adds	r3, #36	@ 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 ff86 	bl	8004d10 <xTaskRemoveFromEventList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00e      	beq.n	8003e28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e007      	b.n	8003e28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	b25a      	sxtb	r2, r3
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e2c:	e001      	b.n	8003e32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3740      	adds	r7, #64	@ 0x40
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <xQueueReceive+0x32>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	623b      	str	r3, [r7, #32]
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	e7fd      	b.n	8003e76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0x40>
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <xQueueReceive+0x44>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <xQueueReceive+0x46>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <xQueueReceive+0x62>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	61fb      	str	r3, [r7, #28]
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	e7fd      	b.n	8003ea6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eaa:	f001 f8f7 	bl	800509c <xTaskGetSchedulerState>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <xQueueReceive+0x72>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <xQueueReceive+0x76>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueReceive+0x78>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <xQueueReceive+0x94>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	61bb      	str	r3, [r7, #24]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003edc:	f001 fe4c 	bl	8005b78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01f      	beq.n	8003f2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef0:	f000 f978 	bl	80041e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00f      	beq.n	8003f24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f06:	3310      	adds	r3, #16
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 ff01 	bl	8004d10 <xTaskRemoveFromEventList>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f14:	4b3c      	ldr	r3, [pc, #240]	@ (8004008 <xQueueReceive+0x1c0>)
 8003f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f24:	f001 fe5a 	bl	8005bdc <vPortExitCritical>
				return pdPASS;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e069      	b.n	8004000 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f32:	f001 fe53 	bl	8005bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e062      	b.n	8004000 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 ff47 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f4e:	f001 fe45 	bl	8005bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f52:	f000 fcaf 	bl	80048b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f56:	f001 fe0f 	bl	8005b78 <vPortEnterCritical>
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f66:	d103      	bne.n	8003f70 <xQueueReceive+0x128>
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f7c:	d103      	bne.n	8003f86 <xQueueReceive+0x13e>
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f86:	f001 fe29 	bl	8005bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f8a:	1d3a      	adds	r2, r7, #4
 8003f8c:	f107 0310 	add.w	r3, r7, #16
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff36 	bl	8004e04 <xTaskCheckForTimeOut>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d123      	bne.n	8003fe6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fa0:	f000 f998 	bl	80042d4 <prvIsQueueEmpty>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d017      	beq.n	8003fda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fac:	3324      	adds	r3, #36	@ 0x24
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe5a 	bl	8004c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fba:	f000 f939 	bl	8004230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fbe:	f000 fc87 	bl	80048d0 <xTaskResumeAll>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d189      	bne.n	8003edc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <xQueueReceive+0x1c0>)
 8003fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	e780      	b.n	8003edc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fdc:	f000 f928 	bl	8004230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe0:	f000 fc76 	bl	80048d0 <xTaskResumeAll>
 8003fe4:	e77a      	b.n	8003edc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe8:	f000 f922 	bl	8004230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fec:	f000 fc70 	bl	80048d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff2:	f000 f96f 	bl	80042d4 <prvIsQueueEmpty>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f43f af6f 	beq.w	8003edc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004000:	4618      	mov	r0, r3
 8004002:	3730      	adds	r7, #48	@ 0x30
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	@ 0x38
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	623b      	str	r3, [r7, #32]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <xQueueReceiveFromISR+0x3c>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <xQueueReceiveFromISR+0x40>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <xQueueReceiveFromISR+0x42>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	61fb      	str	r3, [r7, #28]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800406a:	f001 fe65 	bl	8005d38 <vPortValidateInterruptPriority>
	__asm volatile
 800406e:	f3ef 8211 	mrs	r2, BASEPRI
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61ba      	str	r2, [r7, #24]
 8004084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004092:	2b00      	cmp	r3, #0
 8004094:	d02f      	beq.n	80040f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040a4:	f000 f89e 	bl	80041e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	1e5a      	subs	r2, r3, #1
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040b8:	d112      	bne.n	80040e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	3310      	adds	r3, #16
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fe22 	bl	8004d10 <xTaskRemoveFromEventList>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e007      	b.n	80040f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e4:	3301      	adds	r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	b25a      	sxtb	r2, r3
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80040f0:	2301      	movs	r3, #1
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f4:	e001      	b.n	80040fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f383 8811 	msr	BASEPRI, r3
}
 8004104:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004108:	4618      	mov	r0, r3
 800410a:	3738      	adds	r7, #56	@ 0x38
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d14d      	bne.n	80041d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ffcc 	bl	80050d8 <xTaskPriorityDisinherit>
 8004140:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	e043      	b.n	80041d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d119      	bne.n	8004184 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6858      	ldr	r0, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	461a      	mov	r2, r3
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	f002 f8a8 	bl	80062b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	441a      	add	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d32b      	bcc.n	80041d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	e026      	b.n	80041d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68d8      	ldr	r0, [r3, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	461a      	mov	r2, r3
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	f002 f88e 	bl	80062b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	425b      	negs	r3, r3
 800419e:	441a      	add	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d207      	bcs.n	80041c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	425b      	negs	r3, r3
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d105      	bne.n	80041d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80041da:	697b      	ldr	r3, [r7, #20]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	441a      	add	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d303      	bcc.n	8004218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68d9      	ldr	r1, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	461a      	mov	r2, r3
 8004222:	6838      	ldr	r0, [r7, #0]
 8004224:	f002 f844 	bl	80062b0 <memcpy>
	}
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004238:	f001 fc9e 	bl	8005b78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004242:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004244:	e011      	b.n	800426a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3324      	adds	r3, #36	@ 0x24
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fd5c 	bl	8004d10 <xTaskRemoveFromEventList>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800425e:	f000 fe35 	bl	8004ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	3b01      	subs	r3, #1
 8004266:	b2db      	uxtb	r3, r3
 8004268:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800426a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	dce9      	bgt.n	8004246 <prvUnlockQueue+0x16>
 8004272:	e000      	b.n	8004276 <prvUnlockQueue+0x46>
					break;
 8004274:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	22ff      	movs	r2, #255	@ 0xff
 800427a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800427e:	f001 fcad 	bl	8005bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004282:	f001 fc79 	bl	8005b78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800428c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800428e:	e011      	b.n	80042b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d012      	beq.n	80042be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3310      	adds	r3, #16
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fd37 	bl	8004d10 <xTaskRemoveFromEventList>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042a8:	f000 fe10 	bl	8004ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042ac:	7bbb      	ldrb	r3, [r7, #14]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dce9      	bgt.n	8004290 <prvUnlockQueue+0x60>
 80042bc:	e000      	b.n	80042c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	22ff      	movs	r2, #255	@ 0xff
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80042c8:	f001 fc88 	bl	8005bdc <vPortExitCritical>
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042dc:	f001 fc4c 	bl	8005b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e001      	b.n	80042f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042f2:	f001 fc73 	bl	8005bdc <vPortExitCritical>

	return xReturn;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004308:	f001 fc36 	bl	8005b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004314:	429a      	cmp	r2, r3
 8004316:	d102      	bne.n	800431e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004318:	2301      	movs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e001      	b.n	8004322 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004322:	f001 fc5b 	bl	8005bdc <vPortExitCritical>

	return xReturn;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e014      	b.n	800436a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004340:	4a0f      	ldr	r2, [pc, #60]	@ (8004380 <vQueueAddToRegistry+0x50>)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800434c:	490c      	ldr	r1, [pc, #48]	@ (8004380 <vQueueAddToRegistry+0x50>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004356:	4a0a      	ldr	r2, [pc, #40]	@ (8004380 <vQueueAddToRegistry+0x50>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004362:	e006      	b.n	8004372 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b07      	cmp	r3, #7
 800436e:	d9e7      	bls.n	8004340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000910 	.word	0x20000910

08004384 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004394:	f001 fbf0 	bl	8005b78 <vPortEnterCritical>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800439e:	b25b      	sxtb	r3, r3
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043a4:	d103      	bne.n	80043ae <vQueueWaitForMessageRestricted+0x2a>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043b4:	b25b      	sxtb	r3, r3
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ba:	d103      	bne.n	80043c4 <vQueueWaitForMessageRestricted+0x40>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c4:	f001 fc0a 	bl	8005bdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3324      	adds	r3, #36	@ 0x24
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fc6d 	bl	8004cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7ff ff26 	bl	8004230 <prvUnlockQueue>
	}
 80043e4:	bf00      	nop
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	@ 0x38
 80043f0:	af04      	add	r7, sp, #16
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	623b      	str	r3, [r7, #32]
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	e7fd      	b.n	8004414 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xTaskCreateStatic+0x4a>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	61fb      	str	r3, [r7, #28]
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004436:	23a8      	movs	r3, #168	@ 0xa8
 8004438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2ba8      	cmp	r3, #168	@ 0xa8
 800443e:	d00b      	beq.n	8004458 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004458:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800445a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01e      	beq.n	800449e <xTaskCreateStatic+0xb2>
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01b      	beq.n	800449e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	2202      	movs	r2, #2
 8004474:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004478:	2300      	movs	r3, #0
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f851 	bl	8004538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004498:	f000 f8f6 	bl	8004688 <prvAddNewTaskToReadyList>
 800449c:	e001      	b.n	80044a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044a2:	697b      	ldr	r3, [r7, #20]
	}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	@ 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	@ 0x30
 80044b0:	af04      	add	r7, sp, #16
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fc7b 	bl	8005dbc <pvPortMalloc>
 80044c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044ce:	20a8      	movs	r0, #168	@ 0xa8
 80044d0:	f001 fc74 	bl	8005dbc <pvPortMalloc>
 80044d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80044e2:	e005      	b.n	80044f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044e4:	6978      	ldr	r0, [r7, #20]
 80044e6:	f001 fd37 	bl	8005f58 <vPortFree>
 80044ea:	e001      	b.n	80044f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d017      	beq.n	8004526 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	2300      	movs	r3, #0
 8004502:	9303      	str	r3, [sp, #12]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	9302      	str	r3, [sp, #8]
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f80f 	bl	8004538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800451a:	69f8      	ldr	r0, [r7, #28]
 800451c:	f000 f8b4 	bl	8004688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	e002      	b.n	800452c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800452a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800452c:	69bb      	ldr	r3, [r7, #24]
	}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	461a      	mov	r2, r3
 8004550:	21a5      	movs	r1, #165	@ 0xa5
 8004552:	f001 fe21 	bl	8006198 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004560:	3b01      	subs	r3, #1
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	617b      	str	r3, [r7, #20]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01f      	beq.n	80045d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	e012      	b.n	80045c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	7819      	ldrb	r1, [r3, #0]
 80045a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	3334      	adds	r3, #52	@ 0x34
 80045ae:	460a      	mov	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d9e9      	bls.n	800459e <prvInitialiseNewTask+0x66>
 80045ca:	e000      	b.n	80045ce <prvInitialiseNewTask+0x96>
			{
				break;
 80045cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d6:	e003      	b.n	80045e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	2b37      	cmp	r3, #55	@ 0x37
 80045e4:	d901      	bls.n	80045ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045e6:	2337      	movs	r3, #55	@ 0x37
 80045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fe:	3304      	adds	r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f8a7 	bl	8003754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	3318      	adds	r3, #24
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f8a2 	bl	8003754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	2200      	movs	r2, #0
 8004632:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	3354      	adds	r3, #84	@ 0x54
 800463a:	224c      	movs	r2, #76	@ 0x4c
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f001 fdaa 	bl	8006198 <memset>
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	4a0d      	ldr	r2, [pc, #52]	@ (800467c <prvInitialiseNewTask+0x144>)
 8004648:	659a      	str	r2, [r3, #88]	@ 0x58
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	4a0c      	ldr	r2, [pc, #48]	@ (8004680 <prvInitialiseNewTask+0x148>)
 800464e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <prvInitialiseNewTask+0x14c>)
 8004654:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	69b8      	ldr	r0, [r7, #24]
 800465c:	f001 f95a 	bl	8005914 <pxPortInitialiseStack>
 8004660:	4602      	mov	r2, r0
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800466c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004672:	bf00      	nop
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20004ba4 	.word	0x20004ba4
 8004680:	20004c0c 	.word	0x20004c0c
 8004684:	20004c74 	.word	0x20004c74

08004688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004690:	f001 fa72 	bl	8005b78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004694:	4b2d      	ldr	r3, [pc, #180]	@ (800474c <prvAddNewTaskToReadyList+0xc4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a2c      	ldr	r2, [pc, #176]	@ (800474c <prvAddNewTaskToReadyList+0xc4>)
 800469c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800469e:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <prvAddNewTaskToReadyList+0xc8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004750 <prvAddNewTaskToReadyList+0xc8>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046ac:	4b27      	ldr	r3, [pc, #156]	@ (800474c <prvAddNewTaskToReadyList+0xc4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d110      	bne.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046b4:	f000 fc2e 	bl	8004f14 <prvInitialiseTaskLists>
 80046b8:	e00d      	b.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046ba:	4b26      	ldr	r3, [pc, #152]	@ (8004754 <prvAddNewTaskToReadyList+0xcc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046c2:	4b23      	ldr	r3, [pc, #140]	@ (8004750 <prvAddNewTaskToReadyList+0xc8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d802      	bhi.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004750 <prvAddNewTaskToReadyList+0xc8>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046d6:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <prvAddNewTaskToReadyList+0xd0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3301      	adds	r3, #1
 80046dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004758 <prvAddNewTaskToReadyList+0xd0>)
 80046de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <prvAddNewTaskToReadyList+0xd0>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ec:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <prvAddNewTaskToReadyList+0xd4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d903      	bls.n	80046fc <prvAddNewTaskToReadyList+0x74>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <prvAddNewTaskToReadyList+0xd4>)
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <prvAddNewTaskToReadyList+0xd8>)
 800470a:	441a      	add	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7ff f82b 	bl	800376e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004718:	f001 fa60 	bl	8005bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <prvAddNewTaskToReadyList+0xcc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00e      	beq.n	8004742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004724:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <prvAddNewTaskToReadyList+0xc8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	429a      	cmp	r2, r3
 8004730:	d207      	bcs.n	8004742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004732:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <prvAddNewTaskToReadyList+0xdc>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000e24 	.word	0x20000e24
 8004750:	20000950 	.word	0x20000950
 8004754:	20000e30 	.word	0x20000e30
 8004758:	20000e40 	.word	0x20000e40
 800475c:	20000e2c 	.word	0x20000e2c
 8004760:	20000954 	.word	0x20000954
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800477a:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <vTaskDelay+0x64>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <vTaskDelay+0x32>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	60bb      	str	r3, [r7, #8]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800479a:	f000 f88b 	bl	80048b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800479e:	2100      	movs	r1, #0
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fd09 	bl	80051b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047a6:	f000 f893 	bl	80048d0 <xTaskResumeAll>
 80047aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047b2:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <vTaskDelay+0x68>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000e4c 	.word	0x20000e4c
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047e2:	463a      	mov	r2, r7
 80047e4:	1d39      	adds	r1, r7, #4
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ff5e 	bl	80036ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	9202      	str	r2, [sp, #8]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	460a      	mov	r2, r1
 8004802:	4924      	ldr	r1, [pc, #144]	@ (8004894 <vTaskStartScheduler+0xc0>)
 8004804:	4824      	ldr	r0, [pc, #144]	@ (8004898 <vTaskStartScheduler+0xc4>)
 8004806:	f7ff fdf1 	bl	80043ec <xTaskCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	4a23      	ldr	r2, [pc, #140]	@ (800489c <vTaskStartScheduler+0xc8>)
 800480e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004810:	4b22      	ldr	r3, [pc, #136]	@ (800489c <vTaskStartScheduler+0xc8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e001      	b.n	8004822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d102      	bne.n	800482e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004828:	f000 fd1a 	bl	8005260 <xTimerCreateTimerTask>
 800482c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11b      	bne.n	800486c <vTaskStartScheduler+0x98>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	613b      	str	r3, [r7, #16]
}
 8004846:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004848:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <vTaskStartScheduler+0xcc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3354      	adds	r3, #84	@ 0x54
 800484e:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <vTaskStartScheduler+0xd0>)
 8004850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004852:	4b15      	ldr	r3, [pc, #84]	@ (80048a8 <vTaskStartScheduler+0xd4>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800485a:	4b14      	ldr	r3, [pc, #80]	@ (80048ac <vTaskStartScheduler+0xd8>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004860:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <vTaskStartScheduler+0xdc>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004866:	f001 f8e3 	bl	8005a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800486a:	e00f      	b.n	800488c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004872:	d10b      	bne.n	800488c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <vTaskStartScheduler+0xb4>
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	080063d8 	.word	0x080063d8
 8004898:	08004ee5 	.word	0x08004ee5
 800489c:	20000e48 	.word	0x20000e48
 80048a0:	20000950 	.word	0x20000950
 80048a4:	20000010 	.word	0x20000010
 80048a8:	20000e44 	.word	0x20000e44
 80048ac:	20000e30 	.word	0x20000e30
 80048b0:	20000e28 	.word	0x20000e28

080048b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048b8:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <vTaskSuspendAll+0x18>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a03      	ldr	r2, [pc, #12]	@ (80048cc <vTaskSuspendAll+0x18>)
 80048c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	20000e4c 	.word	0x20000e4c

080048d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048de:	4b42      	ldr	r3, [pc, #264]	@ (80049e8 <xTaskResumeAll+0x118>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <xTaskResumeAll+0x2e>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	603b      	str	r3, [r7, #0]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048fe:	f001 f93b 	bl	8005b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004902:	4b39      	ldr	r3, [pc, #228]	@ (80049e8 <xTaskResumeAll+0x118>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	4a37      	ldr	r2, [pc, #220]	@ (80049e8 <xTaskResumeAll+0x118>)
 800490a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490c:	4b36      	ldr	r3, [pc, #216]	@ (80049e8 <xTaskResumeAll+0x118>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d162      	bne.n	80049da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004914:	4b35      	ldr	r3, [pc, #212]	@ (80049ec <xTaskResumeAll+0x11c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05e      	beq.n	80049da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800491c:	e02f      	b.n	800497e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491e:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <xTaskResumeAll+0x120>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3318      	adds	r3, #24
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe ff7c 	bl	8003828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe ff77 	bl	8003828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493e:	4b2d      	ldr	r3, [pc, #180]	@ (80049f4 <xTaskResumeAll+0x124>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d903      	bls.n	800494e <xTaskResumeAll+0x7e>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	4a2a      	ldr	r2, [pc, #168]	@ (80049f4 <xTaskResumeAll+0x124>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <xTaskResumeAll+0x128>)
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe ff02 	bl	800376e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <xTaskResumeAll+0x12c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004978:	4b21      	ldr	r3, [pc, #132]	@ (8004a00 <xTaskResumeAll+0x130>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800497e:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <xTaskResumeAll+0x120>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1cb      	bne.n	800491e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800498c:	f000 fb66 	bl	800505c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004990:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <xTaskResumeAll+0x134>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800499c:	f000 f846 	bl	8004a2c <xTaskIncrementTick>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80049a6:	4b16      	ldr	r3, [pc, #88]	@ (8004a00 <xTaskResumeAll+0x130>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f1      	bne.n	800499c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80049b8:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <xTaskResumeAll+0x134>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049be:	4b10      	ldr	r3, [pc, #64]	@ (8004a00 <xTaskResumeAll+0x130>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049c6:	2301      	movs	r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004a08 <xTaskResumeAll+0x138>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049da:	f001 f8ff 	bl	8005bdc <vPortExitCritical>

	return xAlreadyYielded;
 80049de:	68bb      	ldr	r3, [r7, #8]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000e4c 	.word	0x20000e4c
 80049ec:	20000e24 	.word	0x20000e24
 80049f0:	20000de4 	.word	0x20000de4
 80049f4:	20000e2c 	.word	0x20000e2c
 80049f8:	20000954 	.word	0x20000954
 80049fc:	20000950 	.word	0x20000950
 8004a00:	20000e38 	.word	0x20000e38
 8004a04:	20000e34 	.word	0x20000e34
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a12:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <xTaskGetTickCount+0x1c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a18:	687b      	ldr	r3, [r7, #4]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000e28 	.word	0x20000e28

08004a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a36:	4b4f      	ldr	r3, [pc, #316]	@ (8004b74 <xTaskIncrementTick+0x148>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 8090 	bne.w	8004b60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a40:	4b4d      	ldr	r3, [pc, #308]	@ (8004b78 <xTaskIncrementTick+0x14c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a48:	4a4b      	ldr	r2, [pc, #300]	@ (8004b78 <xTaskIncrementTick+0x14c>)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d121      	bne.n	8004a98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a54:	4b49      	ldr	r3, [pc, #292]	@ (8004b7c <xTaskIncrementTick+0x150>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	603b      	str	r3, [r7, #0]
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <xTaskIncrementTick+0x46>
 8004a76:	4b41      	ldr	r3, [pc, #260]	@ (8004b7c <xTaskIncrementTick+0x150>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	4b40      	ldr	r3, [pc, #256]	@ (8004b80 <xTaskIncrementTick+0x154>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3e      	ldr	r2, [pc, #248]	@ (8004b7c <xTaskIncrementTick+0x150>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4a3e      	ldr	r2, [pc, #248]	@ (8004b80 <xTaskIncrementTick+0x154>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <xTaskIncrementTick+0x158>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a3c      	ldr	r2, [pc, #240]	@ (8004b84 <xTaskIncrementTick+0x158>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	f000 fae2 	bl	800505c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a98:	4b3b      	ldr	r3, [pc, #236]	@ (8004b88 <xTaskIncrementTick+0x15c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d349      	bcc.n	8004b36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa2:	4b36      	ldr	r3, [pc, #216]	@ (8004b7c <xTaskIncrementTick+0x150>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aac:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <xTaskIncrementTick+0x15c>)
 8004aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ab2:	601a      	str	r2, [r3, #0]
					break;
 8004ab4:	e03f      	b.n	8004b36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab6:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <xTaskIncrementTick+0x150>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d203      	bcs.n	8004ad6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ace:	4a2e      	ldr	r2, [pc, #184]	@ (8004b88 <xTaskIncrementTick+0x15c>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ad4:	e02f      	b.n	8004b36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fea4 	bl	8003828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	3318      	adds	r3, #24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fe9b 	bl	8003828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af6:	4b25      	ldr	r3, [pc, #148]	@ (8004b8c <xTaskIncrementTick+0x160>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d903      	bls.n	8004b06 <xTaskIncrementTick+0xda>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	4a22      	ldr	r2, [pc, #136]	@ (8004b8c <xTaskIncrementTick+0x160>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a1f      	ldr	r2, [pc, #124]	@ (8004b90 <xTaskIncrementTick+0x164>)
 8004b14:	441a      	add	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7fe fe26 	bl	800376e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b26:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <xTaskIncrementTick+0x168>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d3b8      	bcc.n	8004aa2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b34:	e7b5      	b.n	8004aa2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b36:	4b17      	ldr	r3, [pc, #92]	@ (8004b94 <xTaskIncrementTick+0x168>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b3c:	4914      	ldr	r1, [pc, #80]	@ (8004b90 <xTaskIncrementTick+0x164>)
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d901      	bls.n	8004b52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b52:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <xTaskIncrementTick+0x16c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e004      	b.n	8004b6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b60:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <xTaskIncrementTick+0x170>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	4a0d      	ldr	r2, [pc, #52]	@ (8004b9c <xTaskIncrementTick+0x170>)
 8004b68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b6a:	697b      	ldr	r3, [r7, #20]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000e4c 	.word	0x20000e4c
 8004b78:	20000e28 	.word	0x20000e28
 8004b7c:	20000ddc 	.word	0x20000ddc
 8004b80:	20000de0 	.word	0x20000de0
 8004b84:	20000e3c 	.word	0x20000e3c
 8004b88:	20000e44 	.word	0x20000e44
 8004b8c:	20000e2c 	.word	0x20000e2c
 8004b90:	20000954 	.word	0x20000954
 8004b94:	20000950 	.word	0x20000950
 8004b98:	20000e38 	.word	0x20000e38
 8004b9c:	20000e34 	.word	0x20000e34

08004ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <vTaskSwitchContext+0xb4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bae:	4b2a      	ldr	r3, [pc, #168]	@ (8004c58 <vTaskSwitchContext+0xb8>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bb4:	e047      	b.n	8004c46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004bb6:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <vTaskSwitchContext+0xb8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bbc:	4b27      	ldr	r3, [pc, #156]	@ (8004c5c <vTaskSwitchContext+0xbc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e011      	b.n	8004be8 <vTaskSwitchContext+0x48>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	607b      	str	r3, [r7, #4]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <vTaskSwitchContext+0x3e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	491d      	ldr	r1, [pc, #116]	@ (8004c60 <vTaskSwitchContext+0xc0>)
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0e3      	beq.n	8004bc4 <vTaskSwitchContext+0x24>
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4a16      	ldr	r2, [pc, #88]	@ (8004c60 <vTaskSwitchContext+0xc0>)
 8004c08:	4413      	add	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d104      	bne.n	8004c2c <vTaskSwitchContext+0x8c>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <vTaskSwitchContext+0xc4>)
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4a09      	ldr	r2, [pc, #36]	@ (8004c5c <vTaskSwitchContext+0xbc>)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c3c:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <vTaskSwitchContext+0xc4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3354      	adds	r3, #84	@ 0x54
 8004c42:	4a09      	ldr	r2, [pc, #36]	@ (8004c68 <vTaskSwitchContext+0xc8>)
 8004c44:	6013      	str	r3, [r2, #0]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000e4c 	.word	0x20000e4c
 8004c58:	20000e38 	.word	0x20000e38
 8004c5c:	20000e2c 	.word	0x20000e2c
 8004c60:	20000954 	.word	0x20000954
 8004c64:	20000950 	.word	0x20000950
 8004c68:	20000010 	.word	0x20000010

08004c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60fb      	str	r3, [r7, #12]
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c94:	4b07      	ldr	r3, [pc, #28]	@ (8004cb4 <vTaskPlaceOnEventList+0x48>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3318      	adds	r3, #24
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fe fd8a 	bl	80037b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	6838      	ldr	r0, [r7, #0]
 8004ca6:	f000 fa87 	bl	80051b8 <prvAddCurrentTaskToDelayedList>
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000950 	.word	0x20000950

08004cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	617b      	str	r3, [r7, #20]
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	e7fd      	b.n	8004cde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <vTaskPlaceOnEventListRestricted+0x54>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	4619      	mov	r1, r3
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7fe fd3f 	bl	800376e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68b8      	ldr	r0, [r7, #8]
 8004d00:	f000 fa5a 	bl	80051b8 <prvAddCurrentTaskToDelayedList>
	}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000950 	.word	0x20000950

08004d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3318      	adds	r3, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fd70 	bl	8003828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d48:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <xTaskRemoveFromEventList+0xb0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11d      	bne.n	8004d8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fd67 	bl	8003828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5e:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <xTaskRemoveFromEventList+0xb4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d903      	bls.n	8004d6e <xTaskRemoveFromEventList+0x5e>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	4a16      	ldr	r2, [pc, #88]	@ (8004dc4 <xTaskRemoveFromEventList+0xb4>)
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <xTaskRemoveFromEventList+0xb8>)
 8004d7c:	441a      	add	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7fe fcf2 	bl	800376e <vListInsertEnd>
 8004d8a:	e005      	b.n	8004d98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3318      	adds	r3, #24
 8004d90:	4619      	mov	r1, r3
 8004d92:	480e      	ldr	r0, [pc, #56]	@ (8004dcc <xTaskRemoveFromEventList+0xbc>)
 8004d94:	f7fe fceb 	bl	800376e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <xTaskRemoveFromEventList+0xc0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d905      	bls.n	8004db2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004da6:	2301      	movs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004daa:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <xTaskRemoveFromEventList+0xc4>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e001      	b.n	8004db6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004db6:	697b      	ldr	r3, [r7, #20]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000e4c 	.word	0x20000e4c
 8004dc4:	20000e2c 	.word	0x20000e2c
 8004dc8:	20000954 	.word	0x20000954
 8004dcc:	20000de4 	.word	0x20000de4
 8004dd0:	20000950 	.word	0x20000950
 8004dd4:	20000e38 	.word	0x20000e38

08004dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <vTaskInternalSetTimeOutState+0x24>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <vTaskInternalSetTimeOutState+0x28>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	20000e3c 	.word	0x20000e3c
 8004e00:	20000e28 	.word	0x20000e28

08004e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	613b      	str	r3, [r7, #16]
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60fb      	str	r3, [r7, #12]
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004e4a:	f000 fe95 	bl	8005b78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec4 <xTaskCheckForTimeOut+0xc0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e66:	d102      	bne.n	8004e6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	e023      	b.n	8004eb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <xTaskCheckForTimeOut+0xc4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d007      	beq.n	8004e8a <xTaskCheckForTimeOut+0x86>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d302      	bcc.n	8004e8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	e015      	b.n	8004eb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d20b      	bcs.n	8004eac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	1ad2      	subs	r2, r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff99 	bl	8004dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e004      	b.n	8004eb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eb6:	f000 fe91 	bl	8005bdc <vPortExitCritical>

	return xReturn;
 8004eba:	69fb      	ldr	r3, [r7, #28]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000e28 	.word	0x20000e28
 8004ec8:	20000e3c 	.word	0x20000e3c

08004ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <vTaskMissedYield+0x14>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20000e38 	.word	0x20000e38

08004ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004eec:	f000 f852 	bl	8004f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <prvIdleTask+0x28>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d9f9      	bls.n	8004eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <prvIdleTask+0x2c>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f08:	e7f0      	b.n	8004eec <prvIdleTask+0x8>
 8004f0a:	bf00      	nop
 8004f0c:	20000954 	.word	0x20000954
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	e00c      	b.n	8004f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <prvInitialiseTaskLists+0x60>)
 8004f2c:	4413      	add	r3, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fbf0 	bl	8003714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3301      	adds	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b37      	cmp	r3, #55	@ 0x37
 8004f3e:	d9ef      	bls.n	8004f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f40:	480d      	ldr	r0, [pc, #52]	@ (8004f78 <prvInitialiseTaskLists+0x64>)
 8004f42:	f7fe fbe7 	bl	8003714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f46:	480d      	ldr	r0, [pc, #52]	@ (8004f7c <prvInitialiseTaskLists+0x68>)
 8004f48:	f7fe fbe4 	bl	8003714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f4c:	480c      	ldr	r0, [pc, #48]	@ (8004f80 <prvInitialiseTaskLists+0x6c>)
 8004f4e:	f7fe fbe1 	bl	8003714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f52:	480c      	ldr	r0, [pc, #48]	@ (8004f84 <prvInitialiseTaskLists+0x70>)
 8004f54:	f7fe fbde 	bl	8003714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f58:	480b      	ldr	r0, [pc, #44]	@ (8004f88 <prvInitialiseTaskLists+0x74>)
 8004f5a:	f7fe fbdb 	bl	8003714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <prvInitialiseTaskLists+0x78>)
 8004f60:	4a05      	ldr	r2, [pc, #20]	@ (8004f78 <prvInitialiseTaskLists+0x64>)
 8004f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f64:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <prvInitialiseTaskLists+0x7c>)
 8004f66:	4a05      	ldr	r2, [pc, #20]	@ (8004f7c <prvInitialiseTaskLists+0x68>)
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000954 	.word	0x20000954
 8004f78:	20000db4 	.word	0x20000db4
 8004f7c:	20000dc8 	.word	0x20000dc8
 8004f80:	20000de4 	.word	0x20000de4
 8004f84:	20000df8 	.word	0x20000df8
 8004f88:	20000e10 	.word	0x20000e10
 8004f8c:	20000ddc 	.word	0x20000ddc
 8004f90:	20000de0 	.word	0x20000de0

08004f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f9a:	e019      	b.n	8004fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f9c:	f000 fdec 	bl	8005b78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa0:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <prvCheckTasksWaitingTermination+0x50>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe fc3b 	bl	8003828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <prvCheckTasksWaitingTermination+0x54>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe8 <prvCheckTasksWaitingTermination+0x54>)
 8004fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <prvCheckTasksWaitingTermination+0x58>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004fec <prvCheckTasksWaitingTermination+0x58>)
 8004fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fc6:	f000 fe09 	bl	8005bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f810 	bl	8004ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fd0:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <prvCheckTasksWaitingTermination+0x58>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e1      	bne.n	8004f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000df8 	.word	0x20000df8
 8004fe8:	20000e24 	.word	0x20000e24
 8004fec:	20000e0c 	.word	0x20000e0c

08004ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3354      	adds	r3, #84	@ 0x54
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 f8d3 	bl	80061a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	4618      	mov	r0, r3
 8005012:	f000 ffa1 	bl	8005f58 <vPortFree>
				vPortFree( pxTCB );
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 ff9e 	bl	8005f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800501c:	e019      	b.n	8005052 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005024:	2b01      	cmp	r3, #1
 8005026:	d103      	bne.n	8005030 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 ff95 	bl	8005f58 <vPortFree>
	}
 800502e:	e010      	b.n	8005052 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005036:	2b02      	cmp	r3, #2
 8005038:	d00b      	beq.n	8005052 <prvDeleteTCB+0x62>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60fb      	str	r3, [r7, #12]
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	e7fd      	b.n	800504e <prvDeleteTCB+0x5e>
	}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005062:	4b0c      	ldr	r3, [pc, #48]	@ (8005094 <prvResetNextTaskUnblockTime+0x38>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <prvResetNextTaskUnblockTime+0x3c>)
 800506e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005074:	e008      	b.n	8005088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005076:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <prvResetNextTaskUnblockTime+0x38>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a04      	ldr	r2, [pc, #16]	@ (8005098 <prvResetNextTaskUnblockTime+0x3c>)
 8005086:	6013      	str	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	20000ddc 	.word	0x20000ddc
 8005098:	20000e44 	.word	0x20000e44

0800509c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <xTaskGetSchedulerState+0x34>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050aa:	2301      	movs	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	e008      	b.n	80050c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b0:	4b08      	ldr	r3, [pc, #32]	@ (80050d4 <xTaskGetSchedulerState+0x38>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050b8:	2302      	movs	r3, #2
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	e001      	b.n	80050c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050c2:	687b      	ldr	r3, [r7, #4]
	}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000e30 	.word	0x20000e30
 80050d4:	20000e4c 	.word	0x20000e4c

080050d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d058      	beq.n	80051a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050ee:	4b2f      	ldr	r3, [pc, #188]	@ (80051ac <xTaskPriorityDisinherit+0xd4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d00b      	beq.n	8005110 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	60bb      	str	r3, [r7, #8]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005134:	1e5a      	subs	r2, r3, #1
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005142:	429a      	cmp	r2, r3
 8005144:	d02c      	beq.n	80051a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d128      	bne.n	80051a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fb68 	bl	8003828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005170:	4b0f      	ldr	r3, [pc, #60]	@ (80051b0 <xTaskPriorityDisinherit+0xd8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d903      	bls.n	8005180 <xTaskPriorityDisinherit+0xa8>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	4a0c      	ldr	r2, [pc, #48]	@ (80051b0 <xTaskPriorityDisinherit+0xd8>)
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <xTaskPriorityDisinherit+0xdc>)
 800518e:	441a      	add	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7fe fae9 	bl	800376e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051a0:	697b      	ldr	r3, [r7, #20]
	}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000950 	.word	0x20000950
 80051b0:	20000e2c 	.word	0x20000e2c
 80051b4:	20000954 	.word	0x20000954

080051b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051c2:	4b21      	ldr	r3, [pc, #132]	@ (8005248 <prvAddCurrentTaskToDelayedList+0x90>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051c8:	4b20      	ldr	r3, [pc, #128]	@ (800524c <prvAddCurrentTaskToDelayedList+0x94>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fb2a 	bl	8003828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051da:	d10a      	bne.n	80051f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051e2:	4b1a      	ldr	r3, [pc, #104]	@ (800524c <prvAddCurrentTaskToDelayedList+0x94>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4819      	ldr	r0, [pc, #100]	@ (8005250 <prvAddCurrentTaskToDelayedList+0x98>)
 80051ec:	f7fe fabf 	bl	800376e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051f0:	e026      	b.n	8005240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051fa:	4b14      	ldr	r3, [pc, #80]	@ (800524c <prvAddCurrentTaskToDelayedList+0x94>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	429a      	cmp	r2, r3
 8005208:	d209      	bcs.n	800521e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <prvAddCurrentTaskToDelayedList+0x9c>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b0f      	ldr	r3, [pc, #60]	@ (800524c <prvAddCurrentTaskToDelayedList+0x94>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f7fe facd 	bl	80037b6 <vListInsert>
}
 800521c:	e010      	b.n	8005240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800521e:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <prvAddCurrentTaskToDelayedList+0x94>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fe fac3 	bl	80037b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	d202      	bcs.n	8005240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800523a:	4a08      	ldr	r2, [pc, #32]	@ (800525c <prvAddCurrentTaskToDelayedList+0xa4>)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6013      	str	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000e28 	.word	0x20000e28
 800524c:	20000950 	.word	0x20000950
 8005250:	20000e10 	.word	0x20000e10
 8005254:	20000de0 	.word	0x20000de0
 8005258:	20000ddc 	.word	0x20000ddc
 800525c:	20000e44 	.word	0x20000e44

08005260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	@ 0x28
 8005264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800526a:	f000 fb13 	bl	8005894 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800526e:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <xTimerCreateTimerTask+0x84>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d021      	beq.n	80052ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800527e:	1d3a      	adds	r2, r7, #4
 8005280:	f107 0108 	add.w	r1, r7, #8
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fa29 	bl	80036e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	9202      	str	r2, [sp, #8]
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	2302      	movs	r3, #2
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2300      	movs	r3, #0
 800529e:	460a      	mov	r2, r1
 80052a0:	4911      	ldr	r1, [pc, #68]	@ (80052e8 <xTimerCreateTimerTask+0x88>)
 80052a2:	4812      	ldr	r0, [pc, #72]	@ (80052ec <xTimerCreateTimerTask+0x8c>)
 80052a4:	f7ff f8a2 	bl	80043ec <xTaskCreateStatic>
 80052a8:	4603      	mov	r3, r0
 80052aa:	4a11      	ldr	r2, [pc, #68]	@ (80052f0 <xTimerCreateTimerTask+0x90>)
 80052ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052ae:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <xTimerCreateTimerTask+0x90>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052b6:	2301      	movs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	613b      	str	r3, [r7, #16]
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052d8:	697b      	ldr	r3, [r7, #20]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000e80 	.word	0x20000e80
 80052e8:	080063e0 	.word	0x080063e0
 80052ec:	0800542d 	.word	0x0800542d
 80052f0:	20000e84 	.word	0x20000e84

080052f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005302:	2300      	movs	r3, #0
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <xTimerGenericCommand+0x30>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	623b      	str	r3, [r7, #32]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005324:	4b19      	ldr	r3, [pc, #100]	@ (800538c <xTimerGenericCommand+0x98>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02a      	beq.n	8005382 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b05      	cmp	r3, #5
 800533c:	dc18      	bgt.n	8005370 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800533e:	f7ff fead 	bl	800509c <xTaskGetSchedulerState>
 8005342:	4603      	mov	r3, r0
 8005344:	2b02      	cmp	r3, #2
 8005346:	d109      	bne.n	800535c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005348:	4b10      	ldr	r3, [pc, #64]	@ (800538c <xTimerGenericCommand+0x98>)
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	f107 0110 	add.w	r1, r7, #16
 8005350:	2300      	movs	r3, #0
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	f7fe fbd8 	bl	8003b08 <xQueueGenericSend>
 8005358:	6278      	str	r0, [r7, #36]	@ 0x24
 800535a:	e012      	b.n	8005382 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <xTimerGenericCommand+0x98>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	f107 0110 	add.w	r1, r7, #16
 8005364:	2300      	movs	r3, #0
 8005366:	2200      	movs	r2, #0
 8005368:	f7fe fbce 	bl	8003b08 <xQueueGenericSend>
 800536c:	6278      	str	r0, [r7, #36]	@ 0x24
 800536e:	e008      	b.n	8005382 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <xTimerGenericCommand+0x98>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	f107 0110 	add.w	r1, r7, #16
 8005378:	2300      	movs	r3, #0
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	f7fe fcc6 	bl	8003d0c <xQueueGenericSendFromISR>
 8005380:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005384:	4618      	mov	r0, r3
 8005386:	3728      	adds	r7, #40	@ 0x28
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000e80 	.word	0x20000e80

08005390 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539a:	4b23      	ldr	r3, [pc, #140]	@ (8005428 <prvProcessExpiredTimer+0x98>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fa3d 	bl	8003828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d023      	beq.n	8005404 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	18d1      	adds	r1, r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f000 f8d5 	bl	8005578 <prvInsertTimerInActiveList>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d020      	beq.n	8005416 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053d4:	2300      	movs	r3, #0
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	2100      	movs	r1, #0
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7ff ff88 	bl	80052f4 <xTimerGenericCommand>
 80053e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d114      	bne.n	8005416 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60fb      	str	r3, [r7, #12]
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	4798      	blx	r3
}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000e78 	.word	0x20000e78

0800542c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f859 	bl	80054f0 <prvGetNextExpireTime>
 800543e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4619      	mov	r1, r3
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f805 	bl	8005454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800544a:	f000 f8d7 	bl	80055fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800544e:	bf00      	nop
 8005450:	e7f0      	b.n	8005434 <prvTimerTask+0x8>
	...

08005454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800545e:	f7ff fa29 	bl	80048b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f866 	bl	8005538 <prvSampleTimeNow>
 800546c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d130      	bne.n	80054d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <prvProcessTimerOrBlockTask+0x3c>
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	429a      	cmp	r2, r3
 8005480:	d806      	bhi.n	8005490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005482:	f7ff fa25 	bl	80048d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff81 	bl	8005390 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800548e:	e024      	b.n	80054da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005496:	4b13      	ldr	r3, [pc, #76]	@ (80054e4 <prvProcessTimerOrBlockTask+0x90>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <prvProcessTimerOrBlockTask+0x50>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <prvProcessTimerOrBlockTask+0x52>
 80054a4:	2300      	movs	r3, #0
 80054a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054a8:	4b0f      	ldr	r3, [pc, #60]	@ (80054e8 <prvProcessTimerOrBlockTask+0x94>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	4619      	mov	r1, r3
 80054b6:	f7fe ff65 	bl	8004384 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054ba:	f7ff fa09 	bl	80048d0 <xTaskResumeAll>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80054c4:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <prvProcessTimerOrBlockTask+0x98>)
 80054c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
}
 80054d4:	e001      	b.n	80054da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054d6:	f7ff f9fb 	bl	80048d0 <xTaskResumeAll>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000e7c 	.word	0x20000e7c
 80054e8:	20000e80 	.word	0x20000e80
 80054ec:	e000ed04 	.word	0xe000ed04

080054f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <prvGetNextExpireTime+0x44>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <prvGetNextExpireTime+0x16>
 8005502:	2201      	movs	r2, #1
 8005504:	e000      	b.n	8005508 <prvGetNextExpireTime+0x18>
 8005506:	2200      	movs	r2, #0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005514:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <prvGetNextExpireTime+0x44>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e001      	b.n	8005524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005524:	68fb      	ldr	r3, [r7, #12]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000e78 	.word	0x20000e78

08005538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005540:	f7ff fa64 	bl	8004a0c <xTaskGetTickCount>
 8005544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <prvSampleTimeNow+0x3c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	429a      	cmp	r2, r3
 800554e:	d205      	bcs.n	800555c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005550:	f000 f93a 	bl	80057c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e002      	b.n	8005562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005562:	4a04      	ldr	r2, [pc, #16]	@ (8005574 <prvSampleTimeNow+0x3c>)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005568:	68fb      	ldr	r3, [r7, #12]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000e88 	.word	0x20000e88

08005578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d812      	bhi.n	80055c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad2      	subs	r2, r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d302      	bcc.n	80055b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e01b      	b.n	80055ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055b2:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <prvInsertTimerInActiveList+0x7c>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7fe f8fa 	bl	80037b6 <vListInsert>
 80055c2:	e012      	b.n	80055ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d206      	bcs.n	80055da <prvInsertTimerInActiveList+0x62>
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e007      	b.n	80055ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055da:	4b07      	ldr	r3, [pc, #28]	@ (80055f8 <prvInsertTimerInActiveList+0x80>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f7fe f8e6 	bl	80037b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055ea:	697b      	ldr	r3, [r7, #20]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000e7c 	.word	0x20000e7c
 80055f8:	20000e78 	.word	0x20000e78

080055fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08e      	sub	sp, #56	@ 0x38
 8005600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005602:	e0ce      	b.n	80057a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	da19      	bge.n	800563e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	3304      	adds	r3, #4
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	61fb      	str	r3, [r7, #28]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005634:	6850      	ldr	r0, [r2, #4]
 8005636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005638:	6892      	ldr	r2, [r2, #8]
 800563a:	4611      	mov	r1, r2
 800563c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f2c0 80ae 	blt.w	80057a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	3304      	adds	r3, #4
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe f8e6 	bl	8003828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800565c:	463b      	mov	r3, r7
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff6a 	bl	8005538 <prvSampleTimeNow>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b09      	cmp	r3, #9
 800566a:	f200 8097 	bhi.w	800579c <prvProcessReceivedCommands+0x1a0>
 800566e:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <prvProcessReceivedCommands+0x78>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	0800569d 	.word	0x0800569d
 8005678:	0800569d 	.word	0x0800569d
 800567c:	0800569d 	.word	0x0800569d
 8005680:	08005713 	.word	0x08005713
 8005684:	08005727 	.word	0x08005727
 8005688:	08005773 	.word	0x08005773
 800568c:	0800569d 	.word	0x0800569d
 8005690:	0800569d 	.word	0x0800569d
 8005694:	08005713 	.word	0x08005713
 8005698:	08005727 	.word	0x08005727
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	18d1      	adds	r1, r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056bc:	f7ff ff5c 	bl	8005578 <prvInsertTimerInActiveList>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d06c      	beq.n	80057a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d061      	beq.n	80057a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	441a      	add	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2300      	movs	r3, #0
 80056ea:	2100      	movs	r1, #0
 80056ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056ee:	f7ff fe01 	bl	80052f4 <xTimerGenericCommand>
 80056f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d152      	bne.n	80057a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	61bb      	str	r3, [r7, #24]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005724:	e03d      	b.n	80057a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	617b      	str	r3, [r7, #20]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	18d1      	adds	r1, r2, r3
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800576c:	f7ff ff04 	bl	8005578 <prvInsertTimerInActiveList>
					break;
 8005770:	e017      	b.n	80057a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005782:	f000 fbe9 	bl	8005f58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005786:	e00c      	b.n	80057a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	b2da      	uxtb	r2, r3
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800579a:	e002      	b.n	80057a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800579c:	bf00      	nop
 800579e:	e000      	b.n	80057a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80057a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057a2:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <prvProcessReceivedCommands+0x1c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1d39      	adds	r1, r7, #4
 80057a8:	2200      	movs	r2, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fb4c 	bl	8003e48 <xQueueReceive>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f47f af26 	bne.w	8005604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	3730      	adds	r7, #48	@ 0x30
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000e80 	.word	0x20000e80

080057c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057ce:	e049      	b.n	8005864 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057d0:	4b2e      	ldr	r3, [pc, #184]	@ (800588c <prvSwitchTimerLists+0xc4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057da:	4b2c      	ldr	r3, [pc, #176]	@ (800588c <prvSwitchTimerLists+0xc4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe f81d 	bl	8003828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d02f      	beq.n	8005864 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d90e      	bls.n	8005834 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005822:	4b1a      	ldr	r3, [pc, #104]	@ (800588c <prvSwitchTimerLists+0xc4>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3304      	adds	r3, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fd ffc2 	bl	80037b6 <vListInsert>
 8005832:	e017      	b.n	8005864 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005834:	2300      	movs	r3, #0
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	2100      	movs	r1, #0
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fd58 	bl	80052f4 <xTimerGenericCommand>
 8005844:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10b      	bne.n	8005864 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	603b      	str	r3, [r7, #0]
}
 800585e:	bf00      	nop
 8005860:	bf00      	nop
 8005862:	e7fd      	b.n	8005860 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005864:	4b09      	ldr	r3, [pc, #36]	@ (800588c <prvSwitchTimerLists+0xc4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1b0      	bne.n	80057d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800586e:	4b07      	ldr	r3, [pc, #28]	@ (800588c <prvSwitchTimerLists+0xc4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005874:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <prvSwitchTimerLists+0xc8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a04      	ldr	r2, [pc, #16]	@ (800588c <prvSwitchTimerLists+0xc4>)
 800587a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800587c:	4a04      	ldr	r2, [pc, #16]	@ (8005890 <prvSwitchTimerLists+0xc8>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6013      	str	r3, [r2, #0]
}
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000e78 	.word	0x20000e78
 8005890:	20000e7c 	.word	0x20000e7c

08005894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800589a:	f000 f96d 	bl	8005b78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800589e:	4b15      	ldr	r3, [pc, #84]	@ (80058f4 <prvCheckForValidListAndQueue+0x60>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d120      	bne.n	80058e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058a6:	4814      	ldr	r0, [pc, #80]	@ (80058f8 <prvCheckForValidListAndQueue+0x64>)
 80058a8:	f7fd ff34 	bl	8003714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058ac:	4813      	ldr	r0, [pc, #76]	@ (80058fc <prvCheckForValidListAndQueue+0x68>)
 80058ae:	f7fd ff31 	bl	8003714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <prvCheckForValidListAndQueue+0x6c>)
 80058b4:	4a10      	ldr	r2, [pc, #64]	@ (80058f8 <prvCheckForValidListAndQueue+0x64>)
 80058b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058b8:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <prvCheckForValidListAndQueue+0x70>)
 80058ba:	4a10      	ldr	r2, [pc, #64]	@ (80058fc <prvCheckForValidListAndQueue+0x68>)
 80058bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058be:	2300      	movs	r3, #0
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	4b11      	ldr	r3, [pc, #68]	@ (8005908 <prvCheckForValidListAndQueue+0x74>)
 80058c4:	4a11      	ldr	r2, [pc, #68]	@ (800590c <prvCheckForValidListAndQueue+0x78>)
 80058c6:	2110      	movs	r1, #16
 80058c8:	200a      	movs	r0, #10
 80058ca:	f7fe f841 	bl	8003950 <xQueueGenericCreateStatic>
 80058ce:	4603      	mov	r3, r0
 80058d0:	4a08      	ldr	r2, [pc, #32]	@ (80058f4 <prvCheckForValidListAndQueue+0x60>)
 80058d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058d4:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <prvCheckForValidListAndQueue+0x60>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058dc:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <prvCheckForValidListAndQueue+0x60>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	490b      	ldr	r1, [pc, #44]	@ (8005910 <prvCheckForValidListAndQueue+0x7c>)
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fd24 	bl	8004330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e8:	f000 f978 	bl	8005bdc <vPortExitCritical>
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000e80 	.word	0x20000e80
 80058f8:	20000e50 	.word	0x20000e50
 80058fc:	20000e64 	.word	0x20000e64
 8005900:	20000e78 	.word	0x20000e78
 8005904:	20000e7c 	.word	0x20000e7c
 8005908:	20000f2c 	.word	0x20000f2c
 800590c:	20000e8c 	.word	0x20000e8c
 8005910:	080063e8 	.word	0x080063e8

08005914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3b04      	subs	r3, #4
 8005924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800592c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3b04      	subs	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b04      	subs	r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005944:	4a0c      	ldr	r2, [pc, #48]	@ (8005978 <pxPortInitialiseStack+0x64>)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b14      	subs	r3, #20
 800594e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3b04      	subs	r3, #4
 800595a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f06f 0202 	mvn.w	r2, #2
 8005962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3b20      	subs	r3, #32
 8005968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	0800597d 	.word	0x0800597d

0800597c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005986:	4b13      	ldr	r3, [pc, #76]	@ (80059d4 <prvTaskExitError+0x58>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800598e:	d00b      	beq.n	80059a8 <prvTaskExitError+0x2c>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <prvTaskExitError+0x28>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60bb      	str	r3, [r7, #8]
}
 80059ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059bc:	bf00      	nop
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0fc      	beq.n	80059be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c
	...

080059e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	@ (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a08:	4808      	ldr	r0, [pc, #32]	@ (8005a2c <prvPortStartFirstTask+0x24>)
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f380 8808 	msr	MSP, r0
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8814 	msr	CONTROL, r0
 8005a1a:	b662      	cpsie	i
 8005a1c:	b661      	cpsie	f
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	df00      	svc	0
 8005a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed08 	.word	0xe000ed08

08005a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a36:	4b47      	ldr	r3, [pc, #284]	@ (8005b54 <xPortStartScheduler+0x124>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a47      	ldr	r2, [pc, #284]	@ (8005b58 <xPortStartScheduler+0x128>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10b      	bne.n	8005a58 <xPortStartScheduler+0x28>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a58:	4b3e      	ldr	r3, [pc, #248]	@ (8005b54 <xPortStartScheduler+0x124>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b5c <xPortStartScheduler+0x12c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d10b      	bne.n	8005a7a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	613b      	str	r3, [r7, #16]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a7a:	4b39      	ldr	r3, [pc, #228]	@ (8005b60 <xPortStartScheduler+0x130>)
 8005a7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	22ff      	movs	r2, #255	@ 0xff
 8005a8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <xPortStartScheduler+0x134>)
 8005aa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aa2:	4b31      	ldr	r3, [pc, #196]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aa8:	e009      	b.n	8005abe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005ab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac6:	2b80      	cmp	r3, #128	@ 0x80
 8005ac8:	d0ef      	beq.n	8005aaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aca:	4b27      	ldr	r3, [pc, #156]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1c3 0307 	rsb	r3, r3, #7
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d00b      	beq.n	8005aee <xPortStartScheduler+0xbe>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60bb      	str	r3, [r7, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aee:	4b1e      	ldr	r3, [pc, #120]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005af6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005af8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b00:	4a19      	ldr	r2, [pc, #100]	@ (8005b68 <xPortStartScheduler+0x138>)
 8005b02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b0c:	4b17      	ldr	r3, [pc, #92]	@ (8005b6c <xPortStartScheduler+0x13c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <xPortStartScheduler+0x13c>)
 8005b12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b18:	4b14      	ldr	r3, [pc, #80]	@ (8005b6c <xPortStartScheduler+0x13c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a13      	ldr	r2, [pc, #76]	@ (8005b6c <xPortStartScheduler+0x13c>)
 8005b1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b24:	f000 f8da 	bl	8005cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b28:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <xPortStartScheduler+0x140>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b2e:	f000 f8f9 	bl	8005d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b32:	4b10      	ldr	r3, [pc, #64]	@ (8005b74 <xPortStartScheduler+0x144>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a0f      	ldr	r2, [pc, #60]	@ (8005b74 <xPortStartScheduler+0x144>)
 8005b38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b3e:	f7ff ff63 	bl	8005a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b42:	f7ff f82d 	bl	8004ba0 <vTaskSwitchContext>
	prvTaskExitError();
 8005b46:	f7ff ff19 	bl	800597c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	e000ed00 	.word	0xe000ed00
 8005b58:	410fc271 	.word	0x410fc271
 8005b5c:	410fc270 	.word	0x410fc270
 8005b60:	e000e400 	.word	0xe000e400
 8005b64:	20000f7c 	.word	0x20000f7c
 8005b68:	20000f80 	.word	0x20000f80
 8005b6c:	e000ed20 	.word	0xe000ed20
 8005b70:	2000000c 	.word	0x2000000c
 8005b74:	e000ef34 	.word	0xe000ef34

08005b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b92:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <vPortEnterCritical+0x5c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd4 <vPortEnterCritical+0x5c>)
 8005b9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <vPortEnterCritical+0x5c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d110      	bne.n	8005bc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <vPortEnterCritical+0x60>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	603b      	str	r3, [r7, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <vPortEnterCritical+0x4a>
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000000c 	.word	0x2000000c
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005be2:	4b12      	ldr	r3, [pc, #72]	@ (8005c2c <vPortExitCritical+0x50>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <vPortExitCritical+0x26>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	607b      	str	r3, [r7, #4]
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	e7fd      	b.n	8005bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c02:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <vPortExitCritical+0x50>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <vPortExitCritical+0x50>)
 8005c0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c0c:	4b07      	ldr	r3, [pc, #28]	@ (8005c2c <vPortExitCritical+0x50>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <vPortExitCritical+0x44>
 8005c14:	2300      	movs	r3, #0
 8005c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
}
 8005c1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	2000000c 	.word	0x2000000c

08005c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c30:	f3ef 8009 	mrs	r0, PSP
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <pxCurrentTCBConst>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	f01e 0f10 	tst.w	lr, #16
 8005c40:	bf08      	it	eq
 8005c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	6010      	str	r0, [r2, #0]
 8005c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c54:	f380 8811 	msr	BASEPRI, r0
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f7fe ff9e 	bl	8004ba0 <vTaskSwitchContext>
 8005c64:	f04f 0000 	mov.w	r0, #0
 8005c68:	f380 8811 	msr	BASEPRI, r0
 8005c6c:	bc09      	pop	{r0, r3}
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c76:	f01e 0f10 	tst.w	lr, #16
 8005c7a:	bf08      	it	eq
 8005c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c80:	f380 8809 	msr	PSP, r0
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst>:
 8005c90:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	607b      	str	r3, [r7, #4]
}
 8005cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cb2:	f7fe febb 	bl	8004a2c <xTaskIncrementTick>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	@ (8005cd8 <xPortSysTickHandler+0x40>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d14 <vPortSetupTimerInterrupt+0x38>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <vPortSetupTimerInterrupt+0x3c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <vPortSetupTimerInterrupt+0x40>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	4a09      	ldr	r2, [pc, #36]	@ (8005d20 <vPortSetupTimerInterrupt+0x44>)
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cfe:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010
 8005d14:	e000e018 	.word	0xe000e018
 8005d18:	20000000 	.word	0x20000000
 8005d1c:	10624dd3 	.word	0x10624dd3
 8005d20:	e000e014 	.word	0xe000e014

08005d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d34 <vPortEnableVFP+0x10>
 8005d28:	6801      	ldr	r1, [r0, #0]
 8005d2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d2e:	6001      	str	r1, [r0, #0]
 8005d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d32:	bf00      	nop
 8005d34:	e000ed88 	.word	0xe000ed88

08005d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d3e:	f3ef 8305 	mrs	r3, IPSR
 8005d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d915      	bls.n	8005d76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d4a:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <vPortValidateInterruptPriority+0x74>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d54:	4b16      	ldr	r3, [pc, #88]	@ (8005db0 <vPortValidateInterruptPriority+0x78>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	7afa      	ldrb	r2, [r7, #11]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d20b      	bcs.n	8005d76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	607b      	str	r3, [r7, #4]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d76:	4b0f      	ldr	r3, [pc, #60]	@ (8005db4 <vPortValidateInterruptPriority+0x7c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <vPortValidateInterruptPriority+0x80>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d90b      	bls.n	8005d9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	603b      	str	r3, [r7, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	e7fd      	b.n	8005d9a <vPortValidateInterruptPriority+0x62>
	}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000e3f0 	.word	0xe000e3f0
 8005db0:	20000f7c 	.word	0x20000f7c
 8005db4:	e000ed0c 	.word	0xe000ed0c
 8005db8:	20000f80 	.word	0x20000f80

08005dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	@ 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dc8:	f7fe fd74 	bl	80048b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8005f40 <pvPortMalloc+0x184>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dd4:	f000 f924 	bl	8006020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f44 <pvPortMalloc+0x188>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 8095 	bne.w	8005f10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01e      	beq.n	8005e2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005dec:	2208      	movs	r2, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4413      	add	r3, r2
 8005df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f023 0307 	bic.w	r3, r3, #7
 8005e04:	3308      	adds	r3, #8
 8005e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <pvPortMalloc+0x6e>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d06f      	beq.n	8005f10 <pvPortMalloc+0x154>
 8005e30:	4b45      	ldr	r3, [pc, #276]	@ (8005f48 <pvPortMalloc+0x18c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d86a      	bhi.n	8005f10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e3a:	4b44      	ldr	r3, [pc, #272]	@ (8005f4c <pvPortMalloc+0x190>)
 8005e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e3e:	4b43      	ldr	r3, [pc, #268]	@ (8005f4c <pvPortMalloc+0x190>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e44:	e004      	b.n	8005e50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d903      	bls.n	8005e62 <pvPortMalloc+0xa6>
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f1      	bne.n	8005e46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e62:	4b37      	ldr	r3, [pc, #220]	@ (8005f40 <pvPortMalloc+0x184>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d051      	beq.n	8005f10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2208      	movs	r2, #8
 8005e72:	4413      	add	r3, r2
 8005e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	2308      	movs	r3, #8
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d920      	bls.n	8005ed0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <pvPortMalloc+0xfc>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005eca:	69b8      	ldr	r0, [r7, #24]
 8005ecc:	f000 f90a 	bl	80060e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f48 <pvPortMalloc+0x18c>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	4a1b      	ldr	r2, [pc, #108]	@ (8005f48 <pvPortMalloc+0x18c>)
 8005edc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ede:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <pvPortMalloc+0x18c>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <pvPortMalloc+0x194>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d203      	bcs.n	8005ef2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eea:	4b17      	ldr	r3, [pc, #92]	@ (8005f48 <pvPortMalloc+0x18c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a18      	ldr	r2, [pc, #96]	@ (8005f50 <pvPortMalloc+0x194>)
 8005ef0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4b13      	ldr	r3, [pc, #76]	@ (8005f44 <pvPortMalloc+0x188>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f06:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <pvPortMalloc+0x198>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	4a11      	ldr	r2, [pc, #68]	@ (8005f54 <pvPortMalloc+0x198>)
 8005f0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f10:	f7fe fcde 	bl	80048d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <pvPortMalloc+0x17a>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	60fb      	str	r3, [r7, #12]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <pvPortMalloc+0x176>
	return pvReturn;
 8005f36:	69fb      	ldr	r3, [r7, #28]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3728      	adds	r7, #40	@ 0x28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20004b8c 	.word	0x20004b8c
 8005f44:	20004ba0 	.word	0x20004ba0
 8005f48:	20004b90 	.word	0x20004b90
 8005f4c:	20004b84 	.word	0x20004b84
 8005f50:	20004b94 	.word	0x20004b94
 8005f54:	20004b98 	.word	0x20004b98

08005f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04f      	beq.n	800600a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4413      	add	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	4b25      	ldr	r3, [pc, #148]	@ (8006014 <vPortFree+0xbc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <vPortFree+0x46>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	60fb      	str	r3, [r7, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <vPortFree+0x66>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60bb      	str	r3, [r7, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	4b14      	ldr	r3, [pc, #80]	@ (8006014 <vPortFree+0xbc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01e      	beq.n	800600a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d11a      	bne.n	800600a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006014 <vPortFree+0xbc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	401a      	ands	r2, r3
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fe4:	f7fe fc66 	bl	80048b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <vPortFree+0xc0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4a09      	ldr	r2, [pc, #36]	@ (8006018 <vPortFree+0xc0>)
 8005ff4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ff6:	6938      	ldr	r0, [r7, #16]
 8005ff8:	f000 f874 	bl	80060e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <vPortFree+0xc4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	4a06      	ldr	r2, [pc, #24]	@ (800601c <vPortFree+0xc4>)
 8006004:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006006:	f7fe fc63 	bl	80048d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800600a:	bf00      	nop
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20004ba0 	.word	0x20004ba0
 8006018:	20004b90 	.word	0x20004b90
 800601c:	20004b9c 	.word	0x20004b9c

08006020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006026:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800602a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800602c:	4b27      	ldr	r3, [pc, #156]	@ (80060cc <prvHeapInit+0xac>)
 800602e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3307      	adds	r3, #7
 800603e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0307 	bic.w	r3, r3, #7
 8006046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <prvHeapInit+0xac>)
 8006050:	4413      	add	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006058:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <prvHeapInit+0xb0>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800605e:	4b1c      	ldr	r3, [pc, #112]	@ (80060d0 <prvHeapInit+0xb0>)
 8006060:	2200      	movs	r2, #0
 8006062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	4413      	add	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800606c:	2208      	movs	r2, #8
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <prvHeapInit+0xb4>)
 8006080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006082:	4b14      	ldr	r3, [pc, #80]	@ (80060d4 <prvHeapInit+0xb4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800608a:	4b12      	ldr	r3, [pc, #72]	@ (80060d4 <prvHeapInit+0xb4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	1ad2      	subs	r2, r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060a0:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <prvHeapInit+0xb4>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a0a      	ldr	r2, [pc, #40]	@ (80060d8 <prvHeapInit+0xb8>)
 80060ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a09      	ldr	r2, [pc, #36]	@ (80060dc <prvHeapInit+0xbc>)
 80060b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060b8:	4b09      	ldr	r3, [pc, #36]	@ (80060e0 <prvHeapInit+0xc0>)
 80060ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80060be:	601a      	str	r2, [r3, #0]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	20000f84 	.word	0x20000f84
 80060d0:	20004b84 	.word	0x20004b84
 80060d4:	20004b8c 	.word	0x20004b8c
 80060d8:	20004b94 	.word	0x20004b94
 80060dc:	20004b90 	.word	0x20004b90
 80060e0:	20004ba0 	.word	0x20004ba0

080060e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060ec:	4b28      	ldr	r3, [pc, #160]	@ (8006190 <prvInsertBlockIntoFreeList+0xac>)
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e002      	b.n	80060f8 <prvInsertBlockIntoFreeList+0x14>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d8f7      	bhi.n	80060f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4413      	add	r3, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d108      	bne.n	8006126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	441a      	add	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	441a      	add	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d118      	bne.n	800616c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <prvInsertBlockIntoFreeList+0xb0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d00d      	beq.n	8006162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	441a      	add	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	e008      	b.n	8006174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006162:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <prvInsertBlockIntoFreeList+0xb0>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e003      	b.n	8006174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	429a      	cmp	r2, r3
 800617a:	d002      	beq.n	8006182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006182:	bf00      	nop
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20004b84 	.word	0x20004b84
 8006194:	20004b8c 	.word	0x20004b8c

08006198 <memset>:
 8006198:	4402      	add	r2, r0
 800619a:	4603      	mov	r3, r0
 800619c:	4293      	cmp	r3, r2
 800619e:	d100      	bne.n	80061a2 <memset+0xa>
 80061a0:	4770      	bx	lr
 80061a2:	f803 1b01 	strb.w	r1, [r3], #1
 80061a6:	e7f9      	b.n	800619c <memset+0x4>

080061a8 <_reclaim_reent>:
 80061a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006260 <_reclaim_reent+0xb8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4283      	cmp	r3, r0
 80061ae:	b570      	push	{r4, r5, r6, lr}
 80061b0:	4604      	mov	r4, r0
 80061b2:	d053      	beq.n	800625c <_reclaim_reent+0xb4>
 80061b4:	69c3      	ldr	r3, [r0, #28]
 80061b6:	b31b      	cbz	r3, 8006200 <_reclaim_reent+0x58>
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	b163      	cbz	r3, 80061d6 <_reclaim_reent+0x2e>
 80061bc:	2500      	movs	r5, #0
 80061be:	69e3      	ldr	r3, [r4, #28]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	5959      	ldr	r1, [r3, r5]
 80061c4:	b9b1      	cbnz	r1, 80061f4 <_reclaim_reent+0x4c>
 80061c6:	3504      	adds	r5, #4
 80061c8:	2d80      	cmp	r5, #128	@ 0x80
 80061ca:	d1f8      	bne.n	80061be <_reclaim_reent+0x16>
 80061cc:	69e3      	ldr	r3, [r4, #28]
 80061ce:	4620      	mov	r0, r4
 80061d0:	68d9      	ldr	r1, [r3, #12]
 80061d2:	f000 f87b 	bl	80062cc <_free_r>
 80061d6:	69e3      	ldr	r3, [r4, #28]
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	b111      	cbz	r1, 80061e2 <_reclaim_reent+0x3a>
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 f875 	bl	80062cc <_free_r>
 80061e2:	69e3      	ldr	r3, [r4, #28]
 80061e4:	689d      	ldr	r5, [r3, #8]
 80061e6:	b15d      	cbz	r5, 8006200 <_reclaim_reent+0x58>
 80061e8:	4629      	mov	r1, r5
 80061ea:	4620      	mov	r0, r4
 80061ec:	682d      	ldr	r5, [r5, #0]
 80061ee:	f000 f86d 	bl	80062cc <_free_r>
 80061f2:	e7f8      	b.n	80061e6 <_reclaim_reent+0x3e>
 80061f4:	680e      	ldr	r6, [r1, #0]
 80061f6:	4620      	mov	r0, r4
 80061f8:	f000 f868 	bl	80062cc <_free_r>
 80061fc:	4631      	mov	r1, r6
 80061fe:	e7e1      	b.n	80061c4 <_reclaim_reent+0x1c>
 8006200:	6961      	ldr	r1, [r4, #20]
 8006202:	b111      	cbz	r1, 800620a <_reclaim_reent+0x62>
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f861 	bl	80062cc <_free_r>
 800620a:	69e1      	ldr	r1, [r4, #28]
 800620c:	b111      	cbz	r1, 8006214 <_reclaim_reent+0x6c>
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f85c 	bl	80062cc <_free_r>
 8006214:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006216:	b111      	cbz	r1, 800621e <_reclaim_reent+0x76>
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f857 	bl	80062cc <_free_r>
 800621e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006220:	b111      	cbz	r1, 8006228 <_reclaim_reent+0x80>
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f852 	bl	80062cc <_free_r>
 8006228:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800622a:	b111      	cbz	r1, 8006232 <_reclaim_reent+0x8a>
 800622c:	4620      	mov	r0, r4
 800622e:	f000 f84d 	bl	80062cc <_free_r>
 8006232:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006234:	b111      	cbz	r1, 800623c <_reclaim_reent+0x94>
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f848 	bl	80062cc <_free_r>
 800623c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800623e:	b111      	cbz	r1, 8006246 <_reclaim_reent+0x9e>
 8006240:	4620      	mov	r0, r4
 8006242:	f000 f843 	bl	80062cc <_free_r>
 8006246:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006248:	b111      	cbz	r1, 8006250 <_reclaim_reent+0xa8>
 800624a:	4620      	mov	r0, r4
 800624c:	f000 f83e 	bl	80062cc <_free_r>
 8006250:	6a23      	ldr	r3, [r4, #32]
 8006252:	b11b      	cbz	r3, 800625c <_reclaim_reent+0xb4>
 8006254:	4620      	mov	r0, r4
 8006256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800625a:	4718      	bx	r3
 800625c:	bd70      	pop	{r4, r5, r6, pc}
 800625e:	bf00      	nop
 8006260:	20000010 	.word	0x20000010

08006264 <__libc_init_array>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4d0d      	ldr	r5, [pc, #52]	@ (800629c <__libc_init_array+0x38>)
 8006268:	4c0d      	ldr	r4, [pc, #52]	@ (80062a0 <__libc_init_array+0x3c>)
 800626a:	1b64      	subs	r4, r4, r5
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	2600      	movs	r6, #0
 8006270:	42a6      	cmp	r6, r4
 8006272:	d109      	bne.n	8006288 <__libc_init_array+0x24>
 8006274:	4d0b      	ldr	r5, [pc, #44]	@ (80062a4 <__libc_init_array+0x40>)
 8006276:	4c0c      	ldr	r4, [pc, #48]	@ (80062a8 <__libc_init_array+0x44>)
 8006278:	f000 f87e 	bl	8006378 <_init>
 800627c:	1b64      	subs	r4, r4, r5
 800627e:	10a4      	asrs	r4, r4, #2
 8006280:	2600      	movs	r6, #0
 8006282:	42a6      	cmp	r6, r4
 8006284:	d105      	bne.n	8006292 <__libc_init_array+0x2e>
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	f855 3b04 	ldr.w	r3, [r5], #4
 800628c:	4798      	blx	r3
 800628e:	3601      	adds	r6, #1
 8006290:	e7ee      	b.n	8006270 <__libc_init_array+0xc>
 8006292:	f855 3b04 	ldr.w	r3, [r5], #4
 8006296:	4798      	blx	r3
 8006298:	3601      	adds	r6, #1
 800629a:	e7f2      	b.n	8006282 <__libc_init_array+0x1e>
 800629c:	08006488 	.word	0x08006488
 80062a0:	08006488 	.word	0x08006488
 80062a4:	08006488 	.word	0x08006488
 80062a8:	0800648c 	.word	0x0800648c

080062ac <__retarget_lock_acquire_recursive>:
 80062ac:	4770      	bx	lr

080062ae <__retarget_lock_release_recursive>:
 80062ae:	4770      	bx	lr

080062b0 <memcpy>:
 80062b0:	440a      	add	r2, r1
 80062b2:	4291      	cmp	r1, r2
 80062b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80062b8:	d100      	bne.n	80062bc <memcpy+0xc>
 80062ba:	4770      	bx	lr
 80062bc:	b510      	push	{r4, lr}
 80062be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c6:	4291      	cmp	r1, r2
 80062c8:	d1f9      	bne.n	80062be <memcpy+0xe>
 80062ca:	bd10      	pop	{r4, pc}

080062cc <_free_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4605      	mov	r5, r0
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d041      	beq.n	8006358 <_free_r+0x8c>
 80062d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d8:	1f0c      	subs	r4, r1, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bfb8      	it	lt
 80062de:	18e4      	addlt	r4, r4, r3
 80062e0:	f000 f83e 	bl	8006360 <__malloc_lock>
 80062e4:	4a1d      	ldr	r2, [pc, #116]	@ (800635c <_free_r+0x90>)
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	b933      	cbnz	r3, 80062f8 <_free_r+0x2c>
 80062ea:	6063      	str	r3, [r4, #4]
 80062ec:	6014      	str	r4, [r2, #0]
 80062ee:	4628      	mov	r0, r5
 80062f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f4:	f000 b83a 	b.w	800636c <__malloc_unlock>
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d908      	bls.n	800630e <_free_r+0x42>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	1821      	adds	r1, r4, r0
 8006300:	428b      	cmp	r3, r1
 8006302:	bf01      	itttt	eq
 8006304:	6819      	ldreq	r1, [r3, #0]
 8006306:	685b      	ldreq	r3, [r3, #4]
 8006308:	1809      	addeq	r1, r1, r0
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	e7ed      	b.n	80062ea <_free_r+0x1e>
 800630e:	461a      	mov	r2, r3
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	b10b      	cbz	r3, 8006318 <_free_r+0x4c>
 8006314:	42a3      	cmp	r3, r4
 8006316:	d9fa      	bls.n	800630e <_free_r+0x42>
 8006318:	6811      	ldr	r1, [r2, #0]
 800631a:	1850      	adds	r0, r2, r1
 800631c:	42a0      	cmp	r0, r4
 800631e:	d10b      	bne.n	8006338 <_free_r+0x6c>
 8006320:	6820      	ldr	r0, [r4, #0]
 8006322:	4401      	add	r1, r0
 8006324:	1850      	adds	r0, r2, r1
 8006326:	4283      	cmp	r3, r0
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	d1e0      	bne.n	80062ee <_free_r+0x22>
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	6053      	str	r3, [r2, #4]
 8006332:	4408      	add	r0, r1
 8006334:	6010      	str	r0, [r2, #0]
 8006336:	e7da      	b.n	80062ee <_free_r+0x22>
 8006338:	d902      	bls.n	8006340 <_free_r+0x74>
 800633a:	230c      	movs	r3, #12
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	e7d6      	b.n	80062ee <_free_r+0x22>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	1821      	adds	r1, r4, r0
 8006344:	428b      	cmp	r3, r1
 8006346:	bf04      	itt	eq
 8006348:	6819      	ldreq	r1, [r3, #0]
 800634a:	685b      	ldreq	r3, [r3, #4]
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	bf04      	itt	eq
 8006350:	1809      	addeq	r1, r1, r0
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	6054      	str	r4, [r2, #4]
 8006356:	e7ca      	b.n	80062ee <_free_r+0x22>
 8006358:	bd38      	pop	{r3, r4, r5, pc}
 800635a:	bf00      	nop
 800635c:	20004ce0 	.word	0x20004ce0

08006360 <__malloc_lock>:
 8006360:	4801      	ldr	r0, [pc, #4]	@ (8006368 <__malloc_lock+0x8>)
 8006362:	f7ff bfa3 	b.w	80062ac <__retarget_lock_acquire_recursive>
 8006366:	bf00      	nop
 8006368:	20004cdc 	.word	0x20004cdc

0800636c <__malloc_unlock>:
 800636c:	4801      	ldr	r0, [pc, #4]	@ (8006374 <__malloc_unlock+0x8>)
 800636e:	f7ff bf9e 	b.w	80062ae <__retarget_lock_release_recursive>
 8006372:	bf00      	nop
 8006374:	20004cdc 	.word	0x20004cdc

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
